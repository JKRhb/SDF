



T2TRG                                                     M. Koster, Ed.
Internet-Draft                                               SmartThings
Intended status: Informational                           C. Bormann, Ed.
Expires: 20 November 2020                         Universit√§t Bremen TZI
                                                             19 May 2020


     SDF: A Simple Definition Format for One Data Model definitions
                     draft-bormann-t2trg-sdf-latest

Abstract

   The Simple Definition Format is a format for domain experts to use in
   the creation and maintenance of OneDM definitions.

   OneDM tools convert this format to database formats and other
   serializations as needed.

   This document describes definitions of OneDM Objects and their
   associated Events, Actions, Properties, and Data types.

   The JSON format of an SDF definition is described in this document.

Contributing

   (point to github repo)

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 November 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.



Koster & Bormann        Expires 20 November 2020                [Page 1]

Internet-Draft                  OneDM SDF                       May 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology and Conventions . . . . . . . . . . . . . . . . .   3
   3.  Example Definition: . . . . . . . . . . . . . . . . . . . . .   3
   4.  SDF structure . . . . . . . . . . . . . . . . . . . . . . . .   4
     4.1.  Information block . . . . . . . . . . . . . . . . . . . .   4
     4.2.  Namespaces section  . . . . . . . . . . . . . . . . . . .   5
     4.3.  Definitions section . . . . . . . . . . . . . . . . . . .   6
   5.  Names and namespaces  . . . . . . . . . . . . . . . . . . . .   7
     5.1.  Structure . . . . . . . . . . . . . . . . . . . . . . . .   7
     5.2.  Contributing global names . . . . . . . . . . . . . . . .   8
     5.3.  Referencing global names  . . . . . . . . . . . . . . . .   8
     5.4.  odmRef  . . . . . . . . . . . . . . . . . . . . . . . . .   9
     5.5.  odmRequired . . . . . . . . . . . . . . . . . . . . . . .   9
   6.  Optionality using the keyword "odmRequired" . . . . . . . . .  10
   7.  Keywords for type definitions . . . . . . . . . . . . . . . .  11
     7.1.  odmObject . . . . . . . . . . . . . . . . . . . . . . . .  11
     7.2.  odmProperty . . . . . . . . . . . . . . . . . . . . . . .  12
     7.3.  odmAction . . . . . . . . . . . . . . . . . . . . . . . .  13
     7.4.  odmEvent  . . . . . . . . . . . . . . . . . . . . . . . .  15
     7.5.  odmData . . . . . . . . . . . . . . . . . . . . . . . . .  16
   8.  Example Simple Object Definition: . . . . . . . . . . . . . .  18
   9.  High Level Composition  . . . . . . . . . . . . . . . . . . .  19
     9.1.  Paths in the model namespaces . . . . . . . . . . . . . .  20
     9.2.  Modular Composition . . . . . . . . . . . . . . . . . . .  20
       9.2.1.  Use of the "odmRef" keyword to re-use a definition  .  20
     9.3.  odmThing  . . . . . . . . . . . . . . . . . . . . . . . .  21
     9.4.  odmProduct  . . . . . . . . . . . . . . . . . . . . . . .  22
   10. Normative References  . . . . . . . . . . . . . . . . . . . .  23
   Appendix A.  Formal Syntax of SDF . . . . . . . . . . . . . . . .  24
   Appendix B.  json-schema.org Rendition of SDF Syntax  . . . . . .  27
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  36
   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  36
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  36







Koster & Bormann        Expires 20 November 2020                [Page 2]

Internet-Draft                  OneDM SDF                       May 2020


1.  Introduction

   The Simple Definition Format is a format for domain experts to use in
   the creation and maintenance of OneDM definitions.

   OneDM tools convert this format to database formats and other
   serializations as needed.

   This document describes definitions of OneDM Objects and their
   associated Events, Actions, Properties, and Data types.

   The JSON format of an SDF definition is described in this document.

2.  Terminology and Conventions

   Quality:  a metadata item in a definition or declaration which says
      something about that definition or declaration.  A quality is
      represented in SDF as a member in a JSON object that serves as a
      definition or declaration

   Definition:  Creates a new semantic term for use in SDF models and
      associates it with a set of qualities

   Declaration:  A reference to and a use of a definition within an
      enclosing definition, intended to create component instances
      within that enclosing definition.

   Conventions:

   *  The singular form is preferred for keywords.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Example Definition:













Koster & Bormann        Expires 20 November 2020                [Page 3]

Internet-Draft                  OneDM SDF                       May 2020


   {
     "info": {
       "title": "Example file for ODM Simple JSON Definition Format",
       "version": "20190424",
       "copyright": "Copyright 2019 Example Corp. All rights reserved.",
       "license": "https://example.com/license"
     },
     "namespace": {
       "st": "https://example.com/capability/odm"
     },
     "defaultNamespace": "st",
     "odmObject": {
       "Switch": {
         "odmProperty": {
           "value": {
             "type": "string",
             "enum": [
               "on",
               "off"
             ]
           }
         },
         "odmAction": {
           "on": {},
           "off": {}
         }
       }
     }
   }

            Figure 1: A simple example of an SDF definition file

4.  SDF structure

   SDF definitions are contained in SDF files.  One or more SDF files
   can work together to provide the definitions and declarations that
   are the payload of the SDF format.

   A SDF definition file contains a single JSON map (JSON object).  This
   object has three sections: the information block, the namespaces
   section and the definitions section.

4.1.  Information block

   The information block contains generic meta data for the file itself
   and all included definitions.





Koster & Bormann        Expires 20 November 2020                [Page 4]

Internet-Draft                  OneDM SDF                       May 2020


   The keyword (map key) that defines an information block is "info".
   Its value is a JSON map in turn, with a set of key-value pairs that
   represent qualities that apply to the included definition.

   Qualities of the information block are shown in Table 1.

    +-----------+--------+----------+---------------------------------+
    | Quality   | Type   | Required | Description                     |
    +===========+========+==========+=================================+
    | title     | string | yes      | A short summary to be displayed |
    |           |        |          | in search results, etc.         |
    +-----------+--------+----------+---------------------------------+
    | version   | string | yes      | The incremental version of the  |
    |           |        |          | definition, format TBD          |
    +-----------+--------+----------+---------------------------------+
    | copyright | string | yes      | Link to text or embedded text   |
    |           |        |          | containing a copyright notice   |
    +-----------+--------+----------+---------------------------------+
    | license   | string | yes      | Link to text or embedded text   |
    |           |        |          | containing license terms        |
    +-----------+--------+----------+---------------------------------+

                Table 1: Qualities of the Information Block

4.2.  Namespaces section

   The namespaces section contains the namespace map and the
   defaultnamespace setting.

   The namespace map is a map from short names for URIs to the namespace
   URIs themselves.

   The defaultnamespace setting selects one of the short names in the
   namespace map; the associated URI of which becomes the default
   namespace for the SDF definition file.
















Koster & Bormann        Expires 20 November 2020                [Page 5]

Internet-Draft                  OneDM SDF                       May 2020


     +------------------+--------+----------+-----------------------+
     | Quality          | Type   | Required | Description           |
     +==================+========+==========+=======================+
     | namespace        | map    | no       | Defines short names   |
     |                  |        |          | mapped to namespace   |
     |                  |        |          | URIs, to be used as   |
     |                  |        |          | identifier prefixes   |
     +------------------+--------+----------+-----------------------+
     | defaultnamespace | string | no       | Identifies one of the |
     |                  |        |          | prefixes in the       |
     |                  |        |          | namespace map to be   |
     |                  |        |          | used as a default in  |
     |                  |        |          | resolving identifiers |
     +------------------+--------+----------+-----------------------+

                       Table 2: Namespaces Section

   The following example declares a set of namespaces and defines "st"
   as the default namespace.

   "namespace": {
     "st": "https://example.com/capability/odm",
     "zcl": "https://example.com/zcl/odm"
   },
   "defaultnamespace": "st",

   If no defaultnamespace setting is given, the SDF definition file does
   not contribute to a global namespace.  As the defaultnamespace gives
   a namespace short name, its presence requires a namespace map that
   contains a mapping for that namespace short name.

   If no namespace map is given, no short names for namespace URIs are
   set up, and no defaultnamespace can be given.

4.3.  Definitions section

   The Definitions section contains one or more type definitions
   according to the class name keywords for type definitions (object,
   property, action, event, data).

   Each class may have zero or more type definitions associated with it.
   Each defined identifier creates a new type and term in the target
   namespace, and has a scope of the current definition block.

   A definition consists of a map entry using the newly defined term as
   a JSON key, with a value consisting of a map of Qualities and their
   values.




Koster & Bormann        Expires 20 November 2020                [Page 6]

Internet-Draft                  OneDM SDF                       May 2020


   A definition may in turn contain other definitions.  Each definition
   consists of the newly defined identifier and a set of key-value pairs
   that represent the defined qualities and contained type definitions.

   An example for an Object definition is given in Figure 2:

   "odmObject": {
     "foo": {
       "odmProperty": {
         "bar": {
           "type": "boolean"
         }
       }
     }
   }

                    Figure 2: Example Object definition

   This example defines an Object "foo" that is defined in the default
   namespace, containing a property "odm:/odmObject/foo/odmProperty/
   bar", with data of type boolean.

5.  Names and namespaces

   SDF definition files may contribute to a global namespace, and may
   reference elements from that global namespace.  (An SDF definition
   file that does not set a defaultnamespace does not contribute to the
   global namespace.)

5.1.  Structure

   Global names look exactly like https:// URIs with attached fragment
   identifiers.

   There is no intention to require that these URIs can be dereferenced.
   (However, as future versions of SDF might find a use for
   dereferencing global names, the URI should be chosen in such a way
   that this may become possible in the future.)

   The absolute URI of a global name should be a URI as per Section 3 of
   [RFC3986], with a scheme of "https" and a path ("hier-part" in
   [RFC3986]).  For the present version of this specification, the query
   part should not be used (it might be used in later versions).

   The fragment identifier is constructed as per Section 6 of [RFC6901].






Koster & Bormann        Expires 20 November 2020                [Page 7]

Internet-Draft                  OneDM SDF                       May 2020


5.2.  Contributing global names

   The fragment identifier part of a global name defined in an SDF
   definition file is constructed from a JSON pointer that selects the
   element defined for this name in the SDF definition file.

   The absolute URI part is a copy of the default namespace, i.e., the
   default namespace is always the target namespace for a name for which
   a definition is contributed.  When emphasizing that name definitions
   are contributed to the default namespace, we therefore also call it
   the "target namespace".

   E.g., in Figure 1, definitions for the following global names are
   contributed:

   *  https://example.com/capability/odm#/odmObject/Switch

   *  https://example.com/capability/odm#/odmObject/Switch/odmProperty/
      value

   *  https://example.com/capability/odm#/odmObject/Switch/odmAction/on

   *  https://example.com/capability/odm#/odmObject/Switch/odmAction/off

   Note the "#", which separates the base part from the fragment
   identifier part.

5.3.  Referencing global names

   A name reference takes the form of the production "curie" in
   [W3C.NOTE-curie-20101216] (note that this excludes the production
   "safe-curie"), limiting the IRIs involved in that production to URIs
   as per [RFC3986] and the prefixes to ASCII characters [RFC0020].

   A name that is contributed by the current SDF definition file can be
   referenced by a Same-Document Reference as per section 4.4 of
   [RFC3986].  As there is little point in referencing the entire SDF
   definition file, this will be a "#" followed by a JSON pointer.  This
   is the only kind of name reference that is possible in an SDF
   definition file that does not set a default namespace.

   Name references that point outside the current SDF definition file
   need to contain curie prefixes.  These then reference namespace
   declarations in the namespaces section.

   For example, if a namespace prefix is defined:





Koster & Bormann        Expires 20 November 2020                [Page 8]

Internet-Draft                  OneDM SDF                       May 2020


   "namespace": {
     "foo": "https://example.com/#"
   }

   Then this reference to that namespace:

   { "odmRef": "foo:odmData/temperatureData" }

   references the global name:

   "https://example.com/#odmData/temperatureData"

   Note that there is no way to provide a URI scheme name in a curie, so
   all references outside of the document need to go through the
   namespace map.

   Name references occur only in specific elements of the syntax of SDF:

   *  copying elements via odmRef values

   *  pointing to elements via odmRequired value elements or as
      odmInput/OutputData etc.

5.4.  odmRef

   The keyword "odmRef" is used in a JSON map establishing a definition
   to copy all of the qualities of the referenced definition, indicated
   by the included name reference, into the newly formed definition.
   (This can be compared to the processing of the "$ref" keyword in JSON
   Schema.)

   For example, this reference:

   "temperatureProperty": {
     "odmRef": "#/odmData/temperatureData"
   }

   creates a new definition "temperatureProperty" that contains all of
   the qualities defined in the definition at /odmData/temperatureData.

5.5.  odmRequired

   The value of "odmRequired" is an array of name references, each
   pointing to one declaration instantiation of which is declared
   mandatory.






Koster & Bormann        Expires 20 November 2020                [Page 9]

Internet-Draft                  OneDM SDF                       May 2020


6.  Optionality using the keyword "odmRequired"

   The keyword "odmRequired" is provided to apply a constraint for which
   definitions are mandatory in an instance conforming to a particular
   definition in which the constraint appears.

   The value of "odmRequired" is an array JSON pointers, each indicating
   one mandatory definition.

   The example in the figure below shows two required elements in the
   odmObject definition for "temperatureWithAlarm", the odmProperty
   "temperatureData", and the odmEvent "overTemperatureEvent".  The
   example also shows the use of JSON pointer with "odmRef" to use a
   pre-existing definition in this definition, for the "alarmType" data
   (odmOutputData) produced by the odmEvent "overTemperatureEvent".

   {
     "odmObject": {
       "temperatureWithAlarm": {
         "odmRequired": [
           "#/odmObject/temperatureWithAlarm/odmData/temperatureData",
           "#/odmObject/temperatureWithAlarm/odmEvent/overTemperatureEvent"
         ],
         "odmData":{
           "temperatureData": {
             "type": "number"
           }
         },
         "odmEvent": {
           "overTemperatureEvent": {
             "odmOutputData": {
               "alarmType": {
                 "odmRef": "odm:/#odmData/alarmTypes/quantityAlarms",
                 "const": "OverTemperatureAlarm"
               },
               "temperature": {
                 "odmRef": "#/odmObject/temperatureWithAlarm/odmData/temperatureData"
               }
             }
           }
         }
       }
     }
   }







Koster & Bormann        Expires 20 November 2020               [Page 10]

Internet-Draft                  OneDM SDF                       May 2020


7.  Keywords for type definitions

   The following SDF keywords are used to create type definitions in the
   target namespace.

7.1.  odmObject

   The odmObject keyword denotes zero or more Object definitions.  An
   odmObject may contain or include definitions of events, actions,
   properties, and data types.

   The qualities of odmObject are shown in Table 3.

   +-------------+--------+----------+----------------------+---------+
   | Quality     | Type   | Required | Description          | Default |
   +=============+========+==========+======================+=========+
   | name        | string | no       | human readable name  | N/A     |
   +-------------+--------+----------+----------------------+---------+
   | description | string | no       | human readable       | N/A     |
   |             |        |          | description          |         |
   +-------------+--------+----------+----------------------+---------+
   | title       | string | no       | human readable title | N/A     |
   |             |        |          | to display           |         |
   +-------------+--------+----------+----------------------+---------+
   | $comment    | string | no       | explanatory comments | N/A     |
   +-------------+--------+----------+----------------------+---------+
   | odmRef      | object | no       | reference to a       | N/A     |
   |             |        |          | definition to be     |         |
   |             |        |          | used as a template   |         |
   |             |        |          | for a new definition |         |
   +-------------+--------+----------+----------------------+---------+
   | odmRequired | array  | no       | Array of JSON        | N/A     |
   |             |        |          | Pointers to          |         |
   |             |        |          | mandatory items in a |         |
   |             |        |          | valid definition     |         |
   +-------------+--------+----------+----------------------+---------+

                     Table 3: Qualities of odmObject

   odmObject may define or include the following ODM types:

   *  odmProperty

   *  odmAction

   *  odmEvent

   *  odmData



Koster & Bormann        Expires 20 November 2020               [Page 11]

Internet-Draft                  OneDM SDF                       May 2020


7.2.  odmProperty

   The odmProperty keyword denotes zero or more property definitions.

   Properties are used to model elements of state.

   The qualities of odmProperty are shown in Table 4.

   +-------------+--------+--------+--------------------------------------+-------+
   | Quality     | Type   |Required| Description                          |Default|
   +=============+========+========+======================================+=======+
   | name        | string | no     | human readable name                  | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | description | string | no     | human readable description           | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | title       | string | no     | human readable title to display      | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | $comment    | string | no     | explanatory comments                 | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | odmRequired | array  | no     | Array of JSON Pointers to mandatory  | N/A   |
   |             |        |        | items in a valid definition          |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | odmRef      | object | no     | reference to a definition to be used | N/A   |
   |             |        |        | as a template for a new definition   |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | readable    |boolean | no     | Reads are allowed                    | true  |
   +-------------+--------+--------+--------------------------------------+-------+
   | writable    |boolean | no     | Writes are allowed                   | true  |
   +-------------+--------+--------+--------------------------------------+-------+
   | observable  |boolean | no     | flag to indicate asynchronous        | true  |
   |             |        |        | notification is available            |       |
   +-------------+--------+--------+--------------------------------------+-------+
   |contentFormat| string | no     | IANA media type string               | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | subtype     | string | no     | subtype enumeration                  | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | widthInBits |integer | no     | hint for protocol binding            | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | units       | string | no     | SenML unit name as per [IANA.senml], | N/A   |
   |             |        |        | subregistry SenML Units              |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | nullable    |boolean | no     | indicates a null value is available  | true  |
   |             |        |        | for this type                        |       |
   +-------------+--------+--------+--------------------------------------+-------+
   |scaleMinimum | number | no     | lower limit of value in units        | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   |scaleMaximum | number | no     | upper limit of value in units        | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+



Koster & Bormann        Expires 20 November 2020               [Page 12]

Internet-Draft                  OneDM SDF                       May 2020


   | type        |string, | no     | JSON data type                       | N/A   |
   |             | enum   |        |                                      |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | minimum     | number | no     | lower limit of value in the          | N/A   |
   |             |        |        | representation format                |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | maximum     | number | no     | upper limit of value in the          | N/A   |
   |             |        |        | representation format                |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | multipleOf  | number | no     |indicates the resolution of the number| N/A   |
   |             |        |        | in representation format             |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | enum        | array  | no     | enumeration constraint               | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | pattern     | string | no     | regular expression to constrain a    | N/A   |
   |             |        |        | string pattern                       |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | format      | string | no     | JSON Schema formats as per           | N/A   |
   |             |        |        |[I-D.handrews-json-schema-validation],|       |
   |             |        |        | Section 7.3                          |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | minLength   |integer | no     | shortest length string in octets     | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | maxLength   |integer | no     | longest length string in octets      | N/A   |
   +-------------+--------+--------+--------------------------------------+-------+
   | default     |number, | no     | specifies the default value for      | N/A   |
   |             |boolean,|        | initialization                       |       |
   |             | string |        |                                      |       |
   +-------------+--------+--------+--------------------------------------+-------+
   | const       |number, | no     |specifies a constant value for a data | N/A   |
   |             |boolean,|        | item or property                     |       |
   |             | string |        |                                      |       |
   +-------------+--------+--------+--------------------------------------+-------+

                     Table 4: Qualities of odmProperty

   odmProperty may define or include the following ODM types:

   *  odmData

7.3.  odmAction

   The odmAction keyword denotes zero or more Action definitions.

   Actions are used to model commands and methods which are invoked.
   Actions have parameter data that are supplied upon invocation.

   The qualities of odmAction are shown in Table 5.



Koster & Bormann        Expires 20 November 2020               [Page 13]

Internet-Draft                  OneDM SDF                       May 2020


   +----------------------+--------+----------+-------------------+----+
   | Quality              | Type   | Required | Description       |    |
   +======================+========+==========+===================+====+
   | name                 | string | no       | human             |    |
   |                      |        |          | readable name     |    |
   +----------------------+--------+----------+-------------------+----+
   | description          | string | no       | human             |    |
   |                      |        |          | readable          |    |
   |                      |        |          | description       |    |
   +----------------------+--------+----------+-------------------+----+
   | title                | string | no       | human             |    |
   |                      |        |          | readable          |    |
   |                      |        |          | title to          |    |
   |                      |        |          | display           |    |
   +----------------------+--------+----------+-------------------+----+
   | $comment             | string | no       | explanatory       | N/ |
   |                      |        |          | comments          | A  |
   +----------------------+--------+----------+-------------------+----+
   | odmRequired          | array  | no       | Array of JSON     | N/ |
   |                      |        |          | Pointers to       | A  |
   |                      |        |          | mandatory         |    |
   |                      |        |          | items in a        |    |
   |                      |        |          | valid action      |    |
   |                      |        |          | definition        |    |
   +----------------------+--------+----------+-------------------+----+
   | odmInputData         | array  | no       | Array of JSON     | N/ |
   |                      |        |          | Pointers to       | A  |
   |                      |        |          | mandatory         |    |
   |                      |        |          | items in a        |    |
   |                      |        |          | valid action      |    |
   |                      |        |          | definition        |    |
   +----------------------+--------+----------+-------------------+----+
   | odmRequiredInputData | array  | no       | Array of JSON     | N/ |
   |                      |        |          | Pointers to       | A  |
   |                      |        |          | mandatory         |    |
   |                      |        |          | items in a        |    |
   |                      |        |          | valid action      |    |
   |                      |        |          | definition        |    |
   +----------------------+--------+----------+-------------------+----+
   | odmOutputData        | array  | no       | Array of JSON     | N/ |
   |                      |        |          | Pointers to       | A  |
   |                      |        |          | mandatory         |    |
   |                      |        |          | items in a        |    |
   |                      |        |          | valid action      |    |
   |                      |        |          | definition        |    |
   +----------------------+--------+----------+-------------------+----+
   | odmRef               | object | no       | reference to      |    |
   |                      |        |          | a definition      |    |



Koster & Bormann        Expires 20 November 2020               [Page 14]

Internet-Draft                  OneDM SDF                       May 2020


   |                      |        |          | to be used as     |    |
   |                      |        |          | a template        |    |
   |                      |        |          | for a new         |    |
   |                      |        |          | definition        |    |
   +----------------------+--------+----------+-------------------+----+

                      Table 5: Qualities of odmAction

   odmAction may define or include the following ODM types:

   *  odmData

7.4.  odmEvent

   The odmEvent keyword denotes zero or more Event definitions.

   Events are used to model asynchronous occurrences that may be
   communicated proactively.  Events have data elements which are
   communicated upon the occurrence of the event.

   The qualities of odmEvent are shown in Table 6.






























Koster & Bormann        Expires 20 November 2020               [Page 15]

Internet-Draft                  OneDM SDF                       May 2020


    +---------------+--------+----------+------------------------+----+
    | Quality       | Type   | Required | Description            |    |
    +===============+========+==========+========================+====+
    | name          | string | no       | human readable name    |    |
    +---------------+--------+----------+------------------------+----+
    | description   | string | no       | human readable         |    |
    |               |        |          | description            |    |
    +---------------+--------+----------+------------------------+----+
    | title         | string | no       | human readable title   |    |
    |               |        |          | to display             |    |
    +---------------+--------+----------+------------------------+----+
    | $comment      | string | no       | explanatory comments   | N/ |
    |               |        |          |                        | A  |
    +---------------+--------+----------+------------------------+----+
    | odmOutputData | array  | no       | Array of JSON Pointers | N/ |
    |               |        |          | to output items in a   | A  |
    |               |        |          | valid definition       |    |
    +---------------+--------+----------+------------------------+----+
    | odmRequired   | array  | no       | Array of JSON Pointers | N/ |
    |               |        |          | to mandatory items in  | A  |
    |               |        |          | a valid definition     |    |
    +---------------+--------+----------+------------------------+----+
    | odmRef        | object | no       | reference to a         |    |
    |               |        |          | definition to be used  |    |
    |               |        |          | as a template for a    |    |
    |               |        |          | new definition         |    |
    +---------------+--------+----------+------------------------+----+

                       Table 6: Qualities of odmEvent

   odmEvent may define or include the following ODM types:

   *  odmData

7.5.  odmData

   The odmData keyword denotes zero or more Data type definitions.

   An odmData definition provides a semantic identifier for a data item
   and describes the constraints on the defined data item.

   odmData is used for Action parameters, for Event data, and for
   reusable constraints in property definitions

   Table 7 lists the qualities of odmData.






Koster & Bormann        Expires 20 November 2020               [Page 16]

Internet-Draft                  OneDM SDF                       May 2020


   +------------+--------+--------+--------------------------------------+--+
   | Quality    | Type   |Required| Description                          |  |
   +============+========+========+======================================+==+
   | name       | string | no     | human readable name                  |  |
   +------------+--------+--------+--------------------------------------+--+
   |description | string | no     | human readable description           |  |
   +------------+--------+--------+--------------------------------------+--+
   | title      | string | no     | human readable title to display      |  |
   +------------+--------+--------+--------------------------------------+--+
   | $comment   | string | no     | explanatory comments                 |N/|
   |            |        |        |                                      |A |
   +------------+--------+--------+--------------------------------------+--+
   | required   | array  | no     |list of references to mandatory items |N/|
   |            |        |        | in a valid definition                |A |
   +------------+--------+--------+--------------------------------------+--+
   | odmRef     | object | no     | reference to a definition to be used |  |
   |            |        |        | as a template for a new definition   |  |
   +------------+--------+--------+--------------------------------------+--+
   | type       | object | no     | reference to a definition to be used |  |
   |            |        |        | as a template for a new definition   |  |
   +------------+--------+--------+--------------------------------------+--+
   | subtype    | string | no     | subtype enumeration                  |N/|
   |            |        |        |                                      |A |
   +------------+--------+--------+--------------------------------------+--+
   |widthInBits |integer | no     | hint for protocol binding            |N/|
   |            |        |        |                                      |A |
   +------------+--------+--------+--------------------------------------+--+
   | units      | string | no     | SenML unit name as per [IANA.senml], |N/|
   |            |        |        | subregistry SenML Units              |A |
   +------------+--------+--------+--------------------------------------+--+
   | nullable   |boolean | no     | indicates a null value is available  |  |
   |            |        |        | for this type                        |  |
   +------------+--------+--------+--------------------------------------+--+
   |scaleMinimum| number | no     | lower limit of value in units        |  |
   +------------+--------+--------+--------------------------------------+--+
   |scaleMaximum| number | no     | upper limit of value in units        |  |
   +------------+--------+--------+--------------------------------------+--+
   | type       |string, | yes    | JSON data type                       |  |
   |            | enum   |        |                                      |  |
   +------------+--------+--------+--------------------------------------+--+
   | minimum    | number | no     | lower limit of value in the          |  |
   |            |        |        | representation format                |  |
   +------------+--------+--------+--------------------------------------+--+
   | maximum    | number | no     | upper limit of value in the          |  |
   |            |        |        | representation format                |  |
   +------------+--------+--------+--------------------------------------+--+
   | multipleOf | number | no     |indicates the resolution of the number|  |
   |            |        |        | in representation format             |  |



Koster & Bormann        Expires 20 November 2020               [Page 17]

Internet-Draft                  OneDM SDF                       May 2020


   +------------+--------+--------+--------------------------------------+--+
   | enum       |array of| no     | enumeration constraint               |  |
   |            |any type|        |                                      |  |
   +------------+--------+--------+--------------------------------------+--+
   | pattern    | string | no     | regular expression to constrain a    |  |
   |            |        |        | string pattern                       |  |
   +------------+--------+--------+--------------------------------------+--+
   | format     | string | no     | JSON Schema formats as per           |N/|
   |            |        |        |[I-D.handrews-json-schema-validation],|A |
   |            |        |        | Section 7.3                          |  |
   +------------+--------+--------+--------------------------------------+--+
   | minLength  |integer | no     | shortest length string in octets     |  |
   +------------+--------+--------+--------------------------------------+--+
   | maxLength  |integer | no     | longest length string in octets      |  |
   +------------+--------+--------+--------------------------------------+--+
   | default    |number, | no     | specifies the default value for      |  |
   |            |boolean,|        | initialization                       |  |
   |            | string |        |                                      |  |
   +------------+--------+--------+--------------------------------------+--+
   | const      |number, | no     |specifies a constant value for a data |  |
   |            |boolean,|        | item or property                     |  |
   |            | string |        |                                      |  |
   +------------+--------+--------+--------------------------------------+--+

                       Table 7: Qualities of odmData

   odmData may define or contain the following ODM types:

   *  JSON Schema Types with numeric constraint extensions

8.  Example Simple Object Definition:




















Koster & Bormann        Expires 20 November 2020               [Page 18]

Internet-Draft                  OneDM SDF                       May 2020


   {
     "info": {
       "title": "Example file for ODM Simple JSON Definition Format",
       "version": "20190424",
       "copyright": "Copyright 2019 Example Corp. All rights reserved.",
       "license": "https://example.com/license"
     },
     "namespace": {
       "st": "https://example.com/capability/odm"
     },
     "defaultNamespace": "st",
     "odmObject": {
       "Switch": {
         "odmProperty": {
           "value": {
             "type": "string",
             "enum": [
               "on",
               "off"
             ]
           }
         },
         "odmAction": {
           "on": {},
           "off": {}
         }
       }
     }
   }

9.  High Level Composition

   The requirements for high level composition include the following:

   *  The ability to represent products, standardized product types, and
      modular products while maintaining the atomicity of Objects.

   *  The ability to compose a reusable definition block from objects,
      for example a single plug unit of an outlet strip with on/off
      control, energy monitor, and optional dimmer objects, while
      retaining the atomicity of the individual objects.

   *  The ability to compose objects and other definition blocks into a
      higher level thing that represents a product, while retaining the
      atomicity of objects.

   *  The ability to enrich and refine a base definition to have




Koster & Bormann        Expires 20 November 2020               [Page 19]

Internet-Draft                  OneDM SDF                       May 2020


      product-specific qualities and quality values, e.g. unit, range,
      and scale settings.

   *  The ability to reference items in one part of a complex definition
      from another part of the same definition, for example to summarize
      the energy readings from all plugs in an outlet strip.

9.1.  Paths in the model namespaces

   The model namespace is organized according to terms that are defined
   in the definition files that are present in the namespace.  For
   example, definitions that originate from an organization or vendor
   are expected to be in a namespace that is specific to that
   organization or vendor.  There is expecred to be an ODM namespace for
   common ODM definitions.

   The structure of a path in a namespace is defined by the JSON
   Pointers to the definitions in the files in that namespace.  For
   example, if there is a file defining an object "Switch" with an
   action "on", then the reference to the action would be
   "ns:/odmObject/Switch/odmAction/on" where ns is the short name for
   the namespace prefix.

9.2.  Modular Composition

   Modular composition of definitions enables an existing definition
   (could be in the same file or another file) to become part of a new
   definition by including a reference to the existing definition within
   the model namespace.

9.2.1.  Use of the "odmRef" keyword to re-use a definition

   An existing definition may be used as a template for a new
   definition, that is, a new definition is created in the target
   namespace which uses the defined qualities of some existing
   definition.  This pattern will use the keyword "odmRef" as a quality
   of a new definition with a value consisting of a reference to the
   existing definition that is to be used as a template.  Optionally,
   new qualities may be added and values of optional qualities and
   quality values may be defined.

   ISSUE: Can qualities from the source definition be overridden?  The
   above only says "added".  Yes, we do want to enable overriding, but
   need to warn specifiers not to use this in a way that contradicts the
   referenced semantics.






Koster & Bormann        Expires 20 November 2020               [Page 20]

Internet-Draft                  OneDM SDF                       May 2020


   "odmData":
     "length" : {
       "type": "number",
       "minimum": 0,
       "units": "m"
       "description": "There can be no negative lengths"
     }
   ...
     "cable-length" : {
       "odmRef": "#/odmData/length"
       "minimum": 0.05,
       "description": "cables must be at least 5 cm"
     }

9.3.  odmThing

   An odmThing is a set of declarations and qualities that may be part
   of a more complex model.  For example, the object declarations that
   make up the definition of a single socket of an outlet strip could be
   encapsulated in an odmThing, and the socket-thing itself could be
   used in a declaration in the odmThing definition for the outlet
   strip.

   odmThing definitions carry semantic meaning, such as a defined
   refrigerator compartment and a defined freezer compartment, making up
   a combination referigerator-freezer product.

   An odmThing may be composed of odmObjects and other odmThings.

   The qualities of odmThing are shown in Table 8.





















Koster & Bormann        Expires 20 November 2020               [Page 21]

Internet-Draft                  OneDM SDF                       May 2020


   +-------------+--------+----------+---------------------------+----+
   | Quality     | Type   | Required | Description               |    |
   +=============+========+==========+===========================+====+
   | name        | string | no       | human readable name       |    |
   +-------------+--------+----------+---------------------------+----+
   | description | string | no       | human readable            |    |
   |             |        |          | description               |    |
   +-------------+--------+----------+---------------------------+----+
   | title       | string | no       | human readable title to   |    |
   |             |        |          | display                   |    |
   +-------------+--------+----------+---------------------------+----+
   | $comment    | string | no       | explanatory comments      | N/ |
   |             |        |          |                           | A  |
   +-------------+--------+----------+---------------------------+----+
   | odmRequired | array  | no       | Array of JSON Pointers to | N/ |
   |             |        |          | mandatory items in a      | A  |
   |             |        |          | valid definition          |    |
   +-------------+--------+----------+---------------------------+----+
   | odmRef      | object | no       | reference to a definition |    |
   |             |        |          | to be used as a template  |    |
   |             |        |          | for a new definition      |    |
   +-------------+--------+----------+---------------------------+----+

                      Table 8: Qualities of odmThing

   odmThing may define or include the following ODM types:

   *  odmThing

   *  odmObject

9.4.  odmProduct

   An odmProduct provides the level of abstraction for representing a
   unique product or a profile for a standardized type of product, for
   example a "device type" definition with required minimum
   functionality.

   Products may be composed of Objects and Things at the high level, and
   may include their own definitions of Properties, Actions, and Events
   that can be used to extend or complete the included Object
   definitions.

   Product definitions may set optional defaults and constant values for
   specific use cases, for example units, range, and scale settings for
   properties, or available parameters for Actions.

   The qualities of odmProduct are shown in Table 9.



Koster & Bormann        Expires 20 November 2020               [Page 22]

Internet-Draft                  OneDM SDF                       May 2020


   +-------------+--------+----------+---------------------------+----+
   | Quality     | Type   | Required | Description               |    |
   +=============+========+==========+===========================+====+
   | name        | string | no       | human readable name       |    |
   +-------------+--------+----------+---------------------------+----+
   | description | string | no       | human readable            |    |
   |             |        |          | description               |    |
   +-------------+--------+----------+---------------------------+----+
   | title       | string | no       | human readable title to   |    |
   |             |        |          | display                   |    |
   +-------------+--------+----------+---------------------------+----+
   | $comment    | string | no       | explanatory comments      | N/ |
   |             |        |          |                           | A  |
   +-------------+--------+----------+---------------------------+----+
   | odmRequired | array  | no       | Array of JSON Pointers to | N/ |
   |             |        |          | mandatory items in a      | A  |
   |             |        |          | valid definition          |    |
   +-------------+--------+----------+---------------------------+----+
   | odmRef      | object | no       | reference to a definition |    |
   |             |        |          | to be used as a template  |    |
   |             |        |          | for a new definition      |    |
   +-------------+--------+----------+---------------------------+----+

                     Table 9: Qualities of odmProduct

   odmProduct may define or include the following ODM types:

   *  odmThing

   *  odmObject

10.  Normative References

   [I-D.handrews-json-schema-validation]
              Wright, A., Andrews, H., and B. Hutton, "JSON Schema
              Validation: A Vocabulary for Structural Validation of
              JSON", Work in Progress, Internet-Draft, draft-handrews-
              json-schema-validation-02, 17 September 2019,
              <http://www.ietf.org/internet-drafts/draft-handrews-json-
              schema-validation-02.txt>.

   [IANA.senml]
              IANA, "Sensor Measurement Lists (SenML)",
              <http://www.iana.org/assignments/senml>.

   [RFC0020]  Cerf, V.G., "ASCII format for network interchange",
              STD 80, RFC 20, DOI 10.17487/RFC0020, October 1969,
              <https://www.rfc-editor.org/info/rfc20>.



Koster & Bormann        Expires 20 November 2020               [Page 23]

Internet-Draft                  OneDM SDF                       May 2020


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.

   [RFC6901]  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              "JavaScript Object Notation (JSON) Pointer", RFC 6901,
              DOI 10.17487/RFC6901, April 2013,
              <https://www.rfc-editor.org/info/rfc6901>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/info/rfc8610>.

   [W3C.NOTE-curie-20101216]
              Birbeck, M. and S. McCarron, "CURIE Syntax 1.0", World
              Wide Web Consortium NOTE NOTE-curie-20101216, 16 December
              2010, <http://www.w3.org/TR/2010/NOTE-curie-20101216>.

Appendix A.  Formal Syntax of SDF

   This appendix describes the syntax of SDF using CDDL [RFC8610].  Note
   that this appendix was derived from Ari Keranen's "alt-schema" and
   Michael Kosters "schema", with a view of covering the syntax that is
   currently in use at the One Data Model "playground" repository.

   TODO: Align with full framework syntax, as required.

   start = sdf-syntax

   ;;; sdf-can-schema.json: SDF Schema
   ; *** $schema = http://json-schema.org/draft-07/schema#

   sdf-syntax = {
    info: sdfinfo                  ; don't require this in flexible syntax, though
    ? namespace: named<text>
    ? defaultnamespace: text



Koster & Bormann        Expires 20 November 2020               [Page 24]

Internet-Draft                  OneDM SDF                       May 2020


    ? odmThing: named<thingqualities>       ; Thing is a composition of objects that work together in some way
    ? odmProduct: named<productqualities>   ; Product is a composition of things and objects that can model a SKU-level instance of a product
    ? odmObject: named<objectqualities>     ; Object is a set of Properties, Actions, and Events that together perform a particular function
    ? odmProperty: named<propertyqualities> ; Property represents the state of an instance of an object
    ? odmAction: named<actionqualities>     ; Action is a directive to invoke an application layer verb associated with an object
    ? odmEvent: named<eventqualities>       ; Event represents an occurence of something associated with an object
    ? odmData: named<dataqualities>         ; Data represents a piece of information that can be the state of a property or a parameter to an action or a signal in an event
   }

   sdfinfo = {
    title: text
    version: text
    copyright: text
    license: text
   }

   ; Shortcut for a map that gives names to instances of X
   named<X> = { * text => X }

   sdf-pointer = text ; .regexp curie-regexp -- TO DO!
   pointer-list = [* sdf-pointer]  ; ISSUE: no point in having an empty list, no? but used for odmRequired in odmobject-multiple_axis_joystick.sdf.json

   commonqualities = (
    ? description: text            ; long text (no constraints)
    ? label: text                  ; short text (no constraints); default to key
    ? $comment: text               ; source code comments only, no semantics
    ? name: text                   ; DELETE ME (deprecated)
    ? odmRef: sdf-pointer
    ? odmRequired: pointer-list
   )

   ; for building hierarchy
   thingqualities = {
    commonqualities,
    ? odmObject: named<objectqualities>
    ? odmThing: named<thingqualities>
   }

   productqualities = thingqualities ; ISSUE: get rid of odmProduct?

   ; for single objects
   objectqualities = {
    commonqualities,
    ? odmProperty: named<propertyqualities>
    ? odmAction: named<actionqualities>
    ? odmEvent: named<eventqualities>
    ? odmData: named<dataqualities>
   }



Koster & Bormann        Expires 20 November 2020               [Page 25]

Internet-Draft                  OneDM SDF                       May 2020


   propertyqualities = dataqualities

   actionqualities = {
    commonqualities,
    ? odmInputData: pointer-list
    ? odmRequiredInputData: pointer-list
    ? odmOutputData: pointer-list
   }

   eventqualities = {
    commonqualities
    ? odmOutputData: pointer-list
   }

   dataqualities = {               ; also propertyqualities
    commonqualities,
    jsonschema,
    ? units: text
    ? scaleMinimum: number
    ? scaleMaximum: number
    ? observable: bool
    ? readable: bool
    ? writable: bool
    ? nullable: bool
    ? widthInBits: number
    ? subtype: "bytestring" / "unixtime"
    ? contentFormat: text
   }

   allowed-types = number / text / bool / null
                 / [* number] / [* text] / [* bool]

   jsonschema = (
    ? type: "number" / "string" / "boolean" / "integer" / "array" ; / "object"
    ? enum: [+ allowed-types]                                              ; should validate against type
    ? const: allowed-types
    ? default: allowed-types
    ; number/integer constraints
    ? minimum: number
    ? maximum: number
    ? exclusiveMinimum: bool / number      ; jso draft 4/7
    ? exclusiveMaximum: bool / number      ; jso draft 4/7
    ? multipleOf: number                   ; ISSUE: Do we need this?
    ; text string constraints
    ? minLength: number
    ? maxLength: number
    ? pattern: text                ; regexp
    ? format: "date-time" / "date" / "time"



Koster & Bormann        Expires 20 November 2020               [Page 26]

Internet-Draft                  OneDM SDF                       May 2020


              / "uri" / "uri-reference" / "uuid"
              ; expand on demand
    ; array constraints
    ? minItems: number
    ? maxItems: number
    ? uniqueItems: bool
    ? items: { ;;; ultimately, this will be mostly recursive, but, for now
               ;;; let's find out what we actually need
        ? description: text            ; long text (no constraints)
        ; commonqualities, ; -- ISSUE: should leave this out for non-complex data types, but need description
        ? type: "number" / "string" / "boolean" / "integer" ; no "array" / "object"
        ; jso subset
        ? minimum: number
        ? maximum: number
        ? enum: [+ any]
        ? format: text
        ? minLength: number
        ? maxLength: number
      }
   )

Appendix B.  json-schema.org Rendition of SDF Syntax

   This appendix describes the syntax of SDF defined in Appendix A, but
   using a version of the description techniques advertised on json-
   schema.org [I-D.handrews-json-schema-validation].

   {
     "title": "sdfcan.cddl",
     "$schema": "http://json-schema.org/draft-07/schema#",
     "$ref": "#/definitions/sdf-syntax",
     "definitions": {
       "sdf-syntax": {
         "type": "object",
         "required": [
           "info"
         ],
         "properties": {
           "info": {
             "$ref": "#/definitions/sdfinfo"
           },
           "namespace": {
             "type": "object",
             "additionalProperties": {
               "type": "string"
             }
           },
           "defaultnamespace": {



Koster & Bormann        Expires 20 November 2020               [Page 27]

Internet-Draft                  OneDM SDF                       May 2020


             "type": "string"
           },
           "odmThing": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/thingqualities"
             }
           },
           "odmProduct": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/productqualities"
             }
           },
           "odmObject": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/objectqualities"
             }
           },
           "odmProperty": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/propertyqualities"
             }
           },
           "odmAction": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/actionqualities"
             }
           },
           "odmEvent": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/eventqualities"
             }
           },
           "odmData": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/dataqualities"
             }
           }
         }
       },
       "sdfinfo": {
         "type": "object",



Koster & Bormann        Expires 20 November 2020               [Page 28]

Internet-Draft                  OneDM SDF                       May 2020


         "required": [
           "title",
           "version",
           "copyright",
           "license"
         ],
         "properties": {
           "title": {
             "type": "string"
           },
           "version": {
             "type": "string"
           },
           "copyright": {
             "type": "string"
           },
           "license": {
             "type": "string"
           }
         }
       },
       "thingqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmObject": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/objectqualities"
                 }
               },
               "odmThing": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/thingqualities"
                 }
               }
             }
           }
         ]
       },
       "commonqualities": {
         "type": "object",
         "properties": {



Koster & Bormann        Expires 20 November 2020               [Page 29]

Internet-Draft                  OneDM SDF                       May 2020


           "description": {
             "type": "string"
           },
           "label": {
             "type": "string"
           },
           "$comment": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "odmRef": {
             "$ref": "#/definitions/sdf-pointer"
           },
           "odmRequired": {
             "$ref": "#/definitions/pointer-list"
           }
         }
       },
       "sdf-pointer": {
         "type": "string"
       },
       "pointer-list": {
         "type": "array",
         "items": {
           "$ref": "#/definitions/sdf-pointer"
         }
       },
       "objectqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmProperty": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/propertyqualities"
                 }
               },
               "odmAction": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/actionqualities"
                 }



Koster & Bormann        Expires 20 November 2020               [Page 30]

Internet-Draft                  OneDM SDF                       May 2020


               },
               "odmEvent": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/eventqualities"
                 }
               },
               "odmData": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/dataqualities"
                 }
               }
             }
           }
         ]
       },
       "propertyqualities": {
         "$ref": "#/definitions/dataqualities"
       },
       "dataqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "$ref": "#/definitions/jsonschema"
           },
           {
             "type": "object",
             "properties": {
               "units": {
                 "type": "string"
               },
               "scaleMinimum": {
                 "type": "number"
               },
               "scaleMaximum": {
                 "type": "number"
               },
               "observable": {
                 "type": "boolean"
               },
               "readable": {
                 "type": "boolean"
               },
               "writable": {
                 "type": "boolean"



Koster & Bormann        Expires 20 November 2020               [Page 31]

Internet-Draft                  OneDM SDF                       May 2020


               },
               "nullable": {
                 "type": "boolean"
               },
               "widthInBits": {
                 "type": "number"
               },
               "subtype": {
                 "type": "string",
                 "enum": [
                   "bytestring",
                   "unixtime"
                 ]
               },
               "contentFormat": {
                 "type": "string"
               }
             }
           }
         ]
       },
       "jsonschema": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string",
             "enum": [
               "number",
               "string",
               "boolean",
               "integer",
               "array"
             ]
           },
           "enum": {
             "type": "array",
             "items": {
               "$ref": "#/definitions/allowed-types"
             },
             "minItems": 1
           },
           "const": {
             "$ref": "#/definitions/allowed-types"
           },
           "default": {
             "$ref": "#/definitions/allowed-types"
           },
           "minimum": {



Koster & Bormann        Expires 20 November 2020               [Page 32]

Internet-Draft                  OneDM SDF                       May 2020


             "type": "number"
           },
           "maximum": {
             "type": "number"
           },
           "exclusiveMinimum": {
             "anyOf": [
               {
                 "type": "boolean"
               },
               {
                 "type": "number"
               }
             ]
           },
           "exclusiveMaximum": {
             "anyOf": [
               {
                 "type": "boolean"
               },
               {
                 "type": "number"
               }
             ]
           },
           "multipleOf": {
             "type": "number"
           },
           "minLength": {
             "type": "number"
           },
           "maxLength": {
             "type": "number"
           },
           "pattern": {
             "type": "string"
           },
           "format": {
             "type": "string",
             "enum": [
               "date-time",
               "date",
               "time",
               "uri",
               "uri-reference",
               "uuid"
             ]
           },



Koster & Bormann        Expires 20 November 2020               [Page 33]

Internet-Draft                  OneDM SDF                       May 2020


           "minItems": {
             "type": "number"
           },
           "maxItems": {
             "type": "number"
           },
           "uniqueItems": {
             "type": "boolean"
           },
           "items": {
             "type": "object",
             "properties": {
               "description": {
                 "type": "string"
               },
               "type": {
                 "type": "string",
                 "enum": [
                   "number",
                   "string",
                   "boolean",
                   "integer"
                 ]
               },
               "minimum": {
                 "type": "number"
               },
               "maximum": {
                 "type": "number"
               },
               "enum": {
                 "type": "array",
                 "minItems": 1
               },
               "format": {
                 "type": "string"
               },
               "minLength": {
                 "type": "number"
               },
               "maxLength": {
                 "type": "number"
               }
             }
           }
         }
       },
       "allowed-types": {



Koster & Bormann        Expires 20 November 2020               [Page 34]

Internet-Draft                  OneDM SDF                       May 2020


         "anyOf": [
           {
             "type": "number"
           },
           {
             "type": "string"
           },
           {
             "type": "boolean"
           },
           {
             "type": "null"
           },
           {
             "type": "array",
             "items": {
               "type": "number"
             }
           },
           {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           {
             "type": "array",
             "items": {
               "type": "boolean"
             }
           }
         ]
       },
       "actionqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmInputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmRequiredInputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmOutputData": {



Koster & Bormann        Expires 20 November 2020               [Page 35]

Internet-Draft                  OneDM SDF                       May 2020


                 "$ref": "#/definitions/pointer-list"
               }
             }
           }
         ]
       },
       "eventqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmOutputData": {
                 "$ref": "#/definitions/pointer-list"
               }
             }
           }
         ]
       },
       "productqualities": {
         "$ref": "#/definitions/thingqualities"
       }
     }
   }

Acknowledgements

   This strawman draft is based on "sdf.md" and "sdf-schema.json" in the
   one-data-model "language" repository, as well as Ari Keranen's "alt-
   schema" from the Ericsson Research "ipso-odm" repository.

Contributors

   Ari Ker√§nen
   Ericsson
   FI-02420 Jorvas
   Finland

   Email: ari.keranen@ericsson.com


   Wouter van der Beek


Authors' Addresses




Koster & Bormann        Expires 20 November 2020               [Page 36]

Internet-Draft                  OneDM SDF                       May 2020


   Michael Koster (editor)
   SmartThings
   665 Clyde Avenue
   Mountain View,  94043
   United States of America

   Phone: +1-707-502-5136
   Email: Michael.Koster@smartthings.com


   Carsten Bormann (editor)
   Universit√§t Bremen TZI
   Postfach 330440
   D-28359 Bremen
   Germany

   Phone: +49-421-218-63921
   Email: cabo@tzi.org

































Koster & Bormann        Expires 20 November 2020               [Page 37]
