



T2TRG                                                     M. Koster, Ed.
Internet-Draft                                               SmartThings
Intended status: Informational                           C. Bormann, Ed.
Expires: 3 December 2020                          Universit√§t Bremen TZI
                                                             1 June 2020


    SDF: Semantic Definition Format (SDF) for Things, their Data and
                              Interactions
                     draft-bormann-t2trg-sdf-latest

Abstract

   The Simple Definition Format is a format for domain experts to use in
   the creation and maintenance of OneDM definitions.

   OneDM tools convert this format to database formats and other
   serializations as needed.

   This document describes definitions of OneDM Objects and their
   associated interactions (Events, Actions, Properties), as well as the
   Data types for the information exchanged in those interactions.

   The JSON format of an SDF definition is described in this document.

Contributing

   Recent versions of this document are available at its github
   repository (TODO: point to github repo), which also provides an issue
   tracker as well as a way to supply "pull requests".

   This document has not yet been submitted as an Internet-Draft; the
   plan is to do this in early June.  (TODO: add "note well" type
   information)

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.







Koster & Bormann         Expires 3 December 2020                [Page 1]

Internet-Draft                  OneDM SDF                      June 2020


   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 3 December 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology and Conventions . . . . . . . . . . . . . . .   3
   2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Example Definition  . . . . . . . . . . . . . . . . . . .   4
     2.2.  Elements of an SDF model  . . . . . . . . . . . . . . . .   5
       2.2.1.  odmObject . . . . . . . . . . . . . . . . . . . . . .   7
       2.2.2.  odmProperty . . . . . . . . . . . . . . . . . . . . .   8
       2.2.3.  odmAction . . . . . . . . . . . . . . . . . . . . . .   9
       2.2.4.  odmEvent  . . . . . . . . . . . . . . . . . . . . . .   9
       2.2.5.  odmData . . . . . . . . . . . . . . . . . . . . . . .  10
       2.2.6.  odmThing  . . . . . . . . . . . . . . . . . . . . . .  10
       2.2.7.  odmProduct  . . . . . . . . . . . . . . . . . . . . .  10
   3.  SDF structure . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Information block . . . . . . . . . . . . . . . . . . . .  10
     3.2.  Namespaces section  . . . . . . . . . . . . . . . . . . .  11
     3.3.  Definitions section . . . . . . . . . . . . . . . . . . .  12
   4.  Names and namespaces  . . . . . . . . . . . . . . . . . . . .  13
     4.1.  Structure . . . . . . . . . . . . . . . . . . . . . . . .  13
     4.2.  Contributing global names . . . . . . . . . . . . . . . .  14
     4.3.  Referencing global names  . . . . . . . . . . . . . . . .  14
     4.4.  odmRef  . . . . . . . . . . . . . . . . . . . . . . . . .  15
     4.5.  odmRequired . . . . . . . . . . . . . . . . . . . . . . .  16
       4.5.1.  Optionality using the keyword "odmRequired" . . . . .  16
     4.6.  Common Qualities  . . . . . . . . . . . . . . . . . . . .  17
     4.7.  Data Qualities  . . . . . . . . . . . . . . . . . . . . .  18



Koster & Bormann         Expires 3 December 2020                [Page 2]

Internet-Draft                  OneDM SDF                      June 2020


   5.  Keywords for type definitions . . . . . . . . . . . . . . . .  20
     5.1.  odmObject . . . . . . . . . . . . . . . . . . . . . . . .  21
     5.2.  odmProperty . . . . . . . . . . . . . . . . . . . . . . .  21
     5.3.  odmAction . . . . . . . . . . . . . . . . . . . . . . . .  21
     5.4.  odmEvent  . . . . . . . . . . . . . . . . . . . . . . . .  22
     5.5.  odmData . . . . . . . . . . . . . . . . . . . . . . . . .  23
   6.  Example Simple Object Definition: . . . . . . . . . . . . . .  23
   7.  High Level Composition  . . . . . . . . . . . . . . . . . . .  24
     7.1.  Paths in the model namespaces . . . . . . . . . . . . . .  25
     7.2.  Modular Composition . . . . . . . . . . . . . . . . . . .  25
       7.2.1.  Use of the "odmRef" keyword to re-use a definition  .  25
     7.3.  odmThing  . . . . . . . . . . . . . . . . . . . . . . . .  26
     7.4.  odmProduct  . . . . . . . . . . . . . . . . . . . . . . .  27
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  27
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  27
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  28
   Appendix A.  Formal Syntax of SDF . . . . . . . . . . . . . . . .  28
   Appendix B.  json-schema.org Rendition of SDF Syntax  . . . . . .  31
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  40
   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  40
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  41

1.  Introduction

   The Simple Definition Format is a format for domain experts to use in
   the creation and maintenance of OneDM definitions.

   OneDM tools convert this format to database formats and other
   serializations as needed.

   This document describes definitions of OneDM Objects and their
   associated interactions (Events, Actions, Properties), as well as the
   Data types for the information exchanged in those interactions.

   The JSON format of an SDF definition is described in this document.

1.1.  Terminology and Conventions

   Thing:  A physical device that is also made available in the Internet
      of Things.  The term is used here for Things that are notable for
      their interaction with the physical world beyond interaction with
      humans; a temperature sensor or a light might be a Thing, but a
      router that employs both temperature sensors and indicator lights
      might exhibit less Thingness, as the effects of its functioning
      are mostly on the digital side.

   Affordance:  An element of an interface offered for interaction,




Koster & Bormann         Expires 3 December 2020                [Page 3]

Internet-Draft                  OneDM SDF                      June 2020


      defining its possible uses or making clear how it can or should be
      used.  The term is used here for the digital interfaces of a Thing
      only; it might also have physical affordances such as buttons,
      dials, and displays.

   Quality:  a metadata item in a definition or declaration which says
      something about that definition or declaration.  A quality is
      represented in SDF as a member in a JSON object that serves as a
      definition or declaration

   Definition:  Creates a new semantic term for use in SDF models and
      associates it with a set of qualities

   Declaration:  A reference to and a use of a definition within an
      enclosing definition, intended to create component instances
      within that enclosing definition.

   Conventions:

   *  The singular form is chosen as the preferred one for the keywords
      defined here.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Overview

2.1.  Example Definition

   We start with an example for the SDF definition of a simple object
   called "Switch" (Figure 1).

















Koster & Bormann         Expires 3 December 2020                [Page 4]

Internet-Draft                  OneDM SDF                      June 2020


   {
     "info": {
       "title": "Example file for ODM Simple JSON Definition Format",
       "version": "20190424",
       "copyright": "Copyright 2019 Example Corp. All rights reserved.",
       "license": "https://example.com/license"
     },
     "namespace": {
       "cap": "https://example.com/capability/odm"
     },
     "defaultNamespace": "cap",
     "odmObject": {
       "Switch": {
         "odmProperty": {
           "value": {
             "type": "string",
             "enum": [
               "on",
               "off"
             ]
           }
         },
         "odmAction": {
           "on": {},
           "off": {}
         }
       }
     }
   }

            Figure 1: A simple example of an SDF definition file

   TODO: Add explanation;

2.2.  Elements of an SDF model

   The SDF language uses seven predefined classes for modeling connected
   Things, six of which are illustrated in Figure 2 and Figure 3
   // [Decide which of these figures we want]"odmProduct" is exactly
   like "odmThing").











Koster & Bormann         Expires 3 December 2020                [Page 5]

Internet-Draft                  OneDM SDF                      June 2020


                   +--------+
                   |odmThing|
                   |--------|
                   |--------|
                   +--------+
                        |
                        |
                  +---------+
                  |odmObject|
                  |---------|
                  |---------|
                  +---------+
                        |
   +-----------+  +---------+   +--------+
   |odmProperty|  |odmAction|   |odmEvent|
   |-----------|  |---------|   |--------|
   |-----------|  |---------|   |--------|
   +-----------+  +---------+   +--------+


                   +-------+
                   |odmData|
                   |-------|
                   |-------|
                   +-------+

                 Figure 2: Main classes used in SDF models
























Koster & Bormann         Expires 3 December 2020                [Page 6]

Internet-Draft                  OneDM SDF                      June 2020


   odmThing --> "0+" odmObject : hasObject
   odmThing --> "0+" odmThing : hasThing

   odmObject --> "0+" odmProperty : hasProperty
   odmObject --> "0+" odmAction : hasAction
   odmObject --> "0+" odmEvent : hasEvent

   odmAction --> "1+" odmData : hasInputData
   odmAction --> "0+" odmData : hasOutputData

   odmEvent --> "1+" odmData : hasOutputData

   odmProperty --> "1" odmData : isInstanceOf

   class odmThing {
   }

   class odmObject {
   }

   class odmProperty {
   }

   class odmAction {
   }

   class odmEvent {
   }

   class odmData {
   }

                 Figure 3: Main classes used in SDF models

   The six main classes are discussed below.

2.2.1.  odmObject

   "odmObject" is the main "atom" of reusable semantics for model
   construction.  It aligns in scope with common definition items from
   many IoT modeling systems, for example ZigBee Clusters [ZCL], OMA
   LWM2M Objects, and OCF Resource Types.

   An "odmObject" contains a set of "odmProperty", "odmAction", and
   "odmEvent" definitions that describe the interaction affordances
   associated with some scope of functionality.





Koster & Bormann         Expires 3 December 2020                [Page 7]

Internet-Draft                  OneDM SDF                      June 2020


   For the granularity of definition, "odmObject" definitions are meant
   to be kept narrow enough in scope to enable broad reuse and
   interoperability.  For example, defining a light bulb using separate
   "odmObject" definitions for on/off control, dimming, and color
   control affordances will enable interoperable functionality to be
   configured for diverse product types.  An "odmObject" definition for
   a common on/off control may be used to control may different kinds of
   Things that require on/off control.

2.2.2.  odmProperty

   "odmProperty" is used to model elements of state within "odmObject"
   instances.

   An instance of "odmProperty" may be associated with some protocol
   affordance to enable the application to obtain the state variable
   and, optionally, modify the state variable.  Additionally, some
   protocols provide for in-time reporting of state changes.  (These
   three aspects are described by the qualities "readable", "writable",
   and "observable" defined for an "odmProperty".)

   An "odmProperty" definition looks like a single "odmData" definition.
   (Qualities beyond those of "odmData" could be defined for odmProperty
   but currently aren't; this means that even "odmProperty" qualities
   such as "readable" and "writable" can be associated with "odmData"
   definitions, as well.)

   For "odmProperty" and "odmData", SDF provides qualities that can
   constrain the structure and values of data allowed in an instance of
   these data, as well as qualities that associate semantics to these
   data, for engineering units and unit scaling information.

   For the data definition within "odmProperty" or "odmData", SDF
   borrows a number of elements proposed for the json-schema.org "JSON
   Schema" format [I-D.handrews-json-schema-validation], enhanced by
   qualities that are specific to SDF.  However, for the current version
   of SDF, data are constrained to be of simple types (number, string,
   Boolean) and arrays of these types.  Syntax extension points are
   provided that can be used to provide richer types in future versions
   of this specification (possibly more of which can be borrowed from
   json-schema.org).

   Note that "odmProperty" definitions (and "odmData" definitions in
   general) are not intended to constrain the formats of data used for
   communication over network interfaces.  Where needed, data
   definitions for payloads of protocol messages are expected to be part
   of the protocol binding.




Koster & Bormann         Expires 3 December 2020                [Page 8]

Internet-Draft                  OneDM SDF                      June 2020


2.2.3.  odmAction

   "odmAction" is provided to model affordances that, when triggered,
   have more effect than just reading, updating, or observing Thing
   state, often resulting in some outward physical effect (which,
   itself, cannot be modeled in SDF).  From a programmer's perspective,
   they might be considered to be roughly analogous to method calls.

   Actions may have multiple data parameters; these are modeled as input
   data and output data (using "odmData", i.e., the same entries as for
   "odmProperty" definitions).  Actions may be long-running, that is to
   say that the effects may not take place immediately as would be
   expected for an update to an "odmPoperty"; the effects may play out
   over time and emit action results.  Actions may also not always
   complete and may result in application errors, such as an item
   blocking the closing of an automatic door.

   Actions may have (or lack) qualities of idempotency and side-effect
   safety.

   The current version of SDF only provides data constraint modeling and
   semantics for the input and output data of "odmAction" entries.
   Again, data definitions for payloads of protocol messages, and
   detailed protocol settings for invoking the action, are expected to
   be part of the protocol binding.

2.2.4.  odmEvent

   "odmEvent" is provided to model "happenings" associated with an
   odmObject that may result in a signal being stored or emitted as a
   result.

   Note that there is a trivial overlap with odmProperty state changes,
   which may also be defined as events but are not generally required to
   be defined as such.  However, "odmEvents" may exhibit certain
   ordering, consistency, and reliability requirements that are expected
   to be supported in various implementations of "odmEvent" that do
   distinguish odmEvent from odmProperty.  For instance, while a state
   change may simply be superseded by another state change, some events
   are "precious" and need to be preserved even if further events
   follow.

   The current version of SDF only provides data constraint modeling and
   semantics for the output data of "odmEvent" entries.  Again, data
   definitions for payloads of protocol messages, and detailed protocol
   settings for invoking the action, are expected to be part of the
   protocol binding.




Koster & Bormann         Expires 3 December 2020                [Page 9]

Internet-Draft                  OneDM SDF                      June 2020


2.2.5.  odmData

   "odmData" is provided separate from "odmProperty" to enable common
   modeling patterns, data constraints, and semantic anchor concepts to
   be factored out for data items that make up "odmProperty" items and
   serve as input and output data for "odmAction" and "odmEvent" items.

   It is a common use case for such a data definition to be shared
   between an "odmProperty" item and input or output parameters of an
   "odmAction" or output data provided by an "odmEvent". "odmData"
   definitions also enable factoring out extended application data types
   such as mode and machine state enumerations to be reused across
   multiple definitions that have similar basic characteristics and
   requirements.

2.2.6.  odmThing

   Back at the top level, "odmThing" enables construction of models for
   complex devices that will use one or more "odmObject" definitions.

   An "odmThing" definition can refine the metadata of the definitions
   it is composed from: other odmThing definitions and odmObject
   definitions.

2.2.7.  odmProduct

   "odmThing" has a derived class "odmProduct", which can be used to
   indicate a top level inventory item with a SKU identifier and other
   particular metadata.  Structurally, there is no difference between
   the two; semantically, an "odmProduct" is intended to describe a
   class of complete Things.

3.  SDF structure

   SDF definitions are contained in SDF files.  One or more SDF files
   can work together to provide the definitions and declarations that
   are the payload of the SDF format.

   A SDF definition file contains a single JSON map (JSON object).  This
   object has three sections: the information block, the namespaces
   section and the definitions section.

3.1.  Information block

   The information block contains generic meta data for the file itself
   and all included definitions.





Koster & Bormann         Expires 3 December 2020               [Page 10]

Internet-Draft                  OneDM SDF                      June 2020


   The keyword (map key) that defines an information block is "info".
   Its value is a JSON map in turn, with a set of key-value pairs that
   represent qualities that apply to the included definition.

   Qualities of the information block are shown in Table 1.

    +-----------+--------+----------+---------------------------------+
    | Quality   | Type   | Required | Description                     |
    +===========+========+==========+=================================+
    | title     | string | yes      | A short summary to be displayed |
    |           |        |          | in search results, etc.         |
    +-----------+--------+----------+---------------------------------+
    | version   | string | yes      | The incremental version of the  |
    |           |        |          | definition, format TBD          |
    +-----------+--------+----------+---------------------------------+
    | copyright | string | yes      | Link to text or embedded text   |
    |           |        |          | containing a copyright notice   |
    +-----------+--------+----------+---------------------------------+
    | license   | string | yes      | Link to text or embedded text   |
    |           |        |          | containing license terms        |
    +-----------+--------+----------+---------------------------------+

                Table 1: Qualities of the Information Block

3.2.  Namespaces section

   The namespaces section contains the namespace map and the
   defaultnamespace setting.

   The namespace map is a map from short names for URIs to the namespace
   URIs themselves.

   The defaultnamespace setting selects one of the short names in the
   namespace map; the associated URI of which becomes the default
   namespace for the SDF definition file.
















Koster & Bormann         Expires 3 December 2020               [Page 11]

Internet-Draft                  OneDM SDF                      June 2020


     +------------------+--------+----------+-----------------------+
     | Quality          | Type   | Required | Description           |
     +==================+========+==========+=======================+
     | namespace        | map    | no       | Defines short names   |
     |                  |        |          | mapped to namespace   |
     |                  |        |          | URIs, to be used as   |
     |                  |        |          | identifier prefixes   |
     +------------------+--------+----------+-----------------------+
     | defaultnamespace | string | no       | Identifies one of the |
     |                  |        |          | prefixes in the       |
     |                  |        |          | namespace map to be   |
     |                  |        |          | used as a default in  |
     |                  |        |          | resolving identifiers |
     +------------------+--------+----------+-----------------------+

                       Table 2: Namespaces Section

   The following example declares a set of namespaces and defines "cap"
   as the default namespace.

   "namespace": {
     "cap": "https://example.com/capability/odm",
     "zcl": "https://example.com/zcl/odm"
   },
   "defaultnamespace": "cap",

   If no defaultnamespace setting is given, the SDF definition file does
   not contribute to a global namespace.  As the defaultnamespace is set
   by giving a namespace short name, its presence requires a namespace
   map that contains a mapping for that namespace short name.

   If no namespace map is given, no short names for namespace URIs are
   set up, and no defaultnamespace can be given.

3.3.  Definitions section

   The Definitions section contains one or more type definitions
   according to the class name keywords for type definitions (for
   object, property, action, event, data, as well as thing and product);
   the names for these type keywords are capitalized and prefixed with
   "odm".  The keywords are used with JSON maps (objects), the keys of
   which serve for naming the individual entries and the values define
   or declare an individual entry.

   Each class defined may have zero or more type definitions associated
   with it.  Each defined identifier creates a new type and term in the
   target namespace, and has a scope of the current definition block.




Koster & Bormann         Expires 3 December 2020               [Page 12]

Internet-Draft                  OneDM SDF                      June 2020


   A definition consists of a map entry using the newly defined term as
   a JSON key, with a value consisting of a map of Qualities and their
   values.

   A definition may in turn contain other definitions.  Each definition
   consists of the newly defined identifier and a set of key-value pairs
   that represent the defined qualities and contained type definitions.

   An example for an Object definition is given in Figure 4:

   "odmObject": {
     "foo": {
       "odmProperty": {
         "bar": {
           "type": "boolean"
         }
       }
     }
   }

                    Figure 4: Example Object definition

   This example defines an Object "foo" that is defined in the default
   namespace (full address: "#/odmObject/foo"), containing a property
   that can be addressed as "#/odmObject/foo/odmProperty/bar", with data
   of type boolean.

   Some of the definitions are also declarations: the definition of the
   entry "bar" in the property "foo" means that each instance of a "foo"
   can have zero or one instance of a "bar".  Entries within
   "odmProperty", "odmAction", and "odmEvent", within "odmObject"
   entries, are declarations.  Similarly, entries within an "odmThing"
   describe instances of "odmObject" (or nested "odmThing") that form
   part of instances of the Thing.

4.  Names and namespaces

   SDF definition files may contribute to a global namespace, and may
   reference elements from that global namespace.  (An SDF definition
   file that does not set a defaultnamespace does not contribute to a
   global namespace.)

4.1.  Structure

   Global names look exactly like https:// URIs with attached fragment
   identifiers.





Koster & Bormann         Expires 3 December 2020               [Page 13]

Internet-Draft                  OneDM SDF                      June 2020


   There is no intention to require that these URIs can be dereferenced.
   (However, as future versions of SDF might find a use for
   dereferencing global names, the URI should be chosen in such a way
   that this may become possible in the future.)

   The absolute URI of a global name should be a URI as per Section 3 of
   [RFC3986], with a scheme of "https" and a path ("hier-part" in
   [RFC3986]).  For the present version of this specification, the query
   part should not be used (it might be used in later versions).

   The fragment identifier is constructed as per Section 6 of [RFC6901].

4.2.  Contributing global names

   The fragment identifier part of a global name defined in an SDF
   definition file is constructed from a JSON pointer that selects the
   element defined for this name in the SDF definition file.

   The absolute URI part is a copy of the default namespace, i.e., the
   default namespace is always the target namespace for a name for which
   a definition is contributed.  When emphasizing that name definitions
   are contributed to the default namespace, we therefore also call it
   the "target namespace" of the SDF definition file.

   E.g., in Figure 1, definitions for the following global names are
   contributed:

   *  https://example.com/capability/odm#/odmObject/Switch

   *  https://example.com/capability/odm#/odmObject/Switch/odmProperty/
      value

   *  https://example.com/capability/odm#/odmObject/Switch/odmAction/on

   *  https://example.com/capability/odm#/odmObject/Switch/odmAction/off

   Note the "#", which separates the base part from the fragment
   identifier part.

4.3.  Referencing global names

   A name reference takes the form of the production "curie" in
   [W3C.NOTE-curie-20101216] (note that this excludes the production
   "safe-curie"), limiting the IRIs involved in that production to URIs
   as per [RFC3986] and the prefixes to ASCII characters [RFC0020].






Koster & Bormann         Expires 3 December 2020               [Page 14]

Internet-Draft                  OneDM SDF                      June 2020


   A name that is contributed by the current SDF definition file can be
   referenced by a Same-Document Reference as per section 4.4 of
   [RFC3986].  As there is little point in referencing the entire SDF
   definition file, this will be a "#" followed by a JSON pointer.  This
   is the only kind of name reference that is possible in an SDF
   definition file that does not set a default namespace.

   Name references that point outside the current SDF definition file
   need to contain curie prefixes.  These then reference namespace
   declarations in the namespaces section.

   For example, if a namespace prefix is defined:

   "namespace": {
     "foo": "https://example.com/#"
   }

   Then this reference to that namespace:

   { "odmRef": "foo:/odmData/temperatureData" }

   references the global name:

   "https://example.com/#/odmData/temperatureData"

   Note that there is no way to provide a URI scheme name in a curie, so
   all references outside of the document need to go through the
   namespace map.

   Name references occur only in specific elements of the syntax of SDF:

   *  copying elements via odmRef values

   *  pointing to elements via odmRequired value elements or as
      odmInput/OutputData etc.

4.4.  odmRef

   In a JSON map establishing a definition, the keyword "odmRef" is used
   to copy all of the qualities of the referenced definition, indicated
   by the included name reference, into the newly formed definition.
   (This can be compared to the processing of the "$ref" keyword in JSON
   Schema.)

   For example, this reference:






Koster & Bormann         Expires 3 December 2020               [Page 15]

Internet-Draft                  OneDM SDF                      June 2020


   "temperatureProperty": {
     "odmRef": "#/odmData/temperatureData"
   }

   creates a new definition "temperatureProperty" that contains all of
   the qualities defined in the definition at /odmData/temperatureData.

4.5.  odmRequired

   The value of "odmRequired" is an array of name references, each
   pointing to one declaration instantiation of which is declared
   mandatory.

4.5.1.  Optionality using the keyword "odmRequired"

   The keyword "odmRequired" is provided to apply a constraint for which
   definitions are mandatory in an instance conforming to a particular
   definition in which the constraint appears.

   The value of "odmRequired" is an array of JSON pointers, each
   indicating one mandatory definition.

   The example in Figure 5 shows two required elements in the odmObject
   definition for "temperatureWithAlarm", the odmProperty
   "temperatureData", and the odmEvent "overTemperatureEvent".  The
   example also shows the use of JSON pointer with "odmRef" to use a
   pre-existing definition in this definition, for the "alarmType" data
   (odmOutputData) produced by the odmEvent "overTemperatureEvent".























Koster & Bormann         Expires 3 December 2020               [Page 16]

Internet-Draft                  OneDM SDF                      June 2020


   {
     "odmObject": {
       "temperatureWithAlarm": {
         "odmRequired": [
           "#/odmObject/temperatureWithAlarm/odmData/temperatureData",
           "#/odmObject/temperatureWithAlarm/odmEvent/overTemperatureEvent"
         ],
         "odmData":{
           "temperatureData": {
             "type": "number"
           }
         },
         "odmEvent": {
           "overTemperatureEvent": {
             "odmOutputData": {
               "alarmType": {
                 "odmRef": "odm:/odmData/alarmTypes/quantityAlarms",
                 "const": "OverTemperatureAlarm"
               },
               "temperature": {
                 "odmRef": "#/odmObject/temperatureWithAlarm/odmData/temperatureData"
               }
             }
           }
         }
       }
     }
   }

                        Figure 5: Using odmRequired

4.6.  Common Qualities

   Definitions in SDF share a number of qualities that provide metadata
   for them.  These are listed in Table 3.  None of these qualities are
   required or have default values that are assumed if the quality is
   absent.  If a label is required for an application and no label is
   given, the last part of the JSON pointer to the definition can be
   used.












Koster & Bormann         Expires 3 December 2020               [Page 17]

Internet-Draft                  OneDM SDF                      June 2020


    +-------------+--------------+-----------------------------------+
    | Quality     | Type         | Description                       |
    +=============+==============+===================================+
    | description | text         | long text (no constraints)        |
    +-------------+--------------+-----------------------------------+
    | label       | text         | short text (no constraints)       |
    +-------------+--------------+-----------------------------------+
    | $comment    | text         | source code comments only, no     |
    |             |              | semantics                         |
    +-------------+--------------+-----------------------------------+
    | odmRef      | sdf-pointer  | (see Section 4.4)                 |
    +-------------+--------------+-----------------------------------+
    | odmRequired | pointer-list | (see Section 4.5, applies to      |
    |             |              | qualities of properties, of data) |
    +-------------+--------------+-----------------------------------+

                        Table 3: Common Qualities

4.7.  Data Qualities

   Data qualities are used in "odmData" and "odmProperty" definitions.

   Table 4 lists data qualities borrowed from
   [I-D.handrews-json-schema-validation]; the intention is that these
   qualities retain their semantics from the versions of the json-
   schema.org proposal there were imported from.

   Table 5 lists data qualities defined specifically for the present
   specification.

   The term "allowed types" stands for primitive JSON types as well as
   homogeneous arrays of numbers, text, or Booleans.  (This list might
   be extended in a future version of SDF.)  An "allowed value" is a
   value allowed for one of these types.

   +----------------+---------------+--------------------------------------+
   | Quality        | Type          | Description                          |
   +================+===============+======================================+
   | type           | "number" /    | JSON data type                       |
   |                | "string" /    |                                      |
   |                | "boolean" /   |                                      |
   |                | "integer" /   |                                      |
   |                | "array"       |                                      |
   +----------------+---------------+--------------------------------------+
   | enum           | array of      | enumeration constraint               |
   |                |allowed values |                                      |
   +----------------+---------------+--------------------------------------+
   | const          | allowed value |specifies a constant value for a data |



Koster & Bormann         Expires 3 December 2020               [Page 18]

Internet-Draft                  OneDM SDF                      June 2020


   |                |               | item or property                     |
   +----------------+---------------+--------------------------------------+
   | default        | allowed value | specifies the default value for      |
   |                |               | initialization                       |
   +----------------+---------------+--------------------------------------+
   | minimum        | number        | lower limit of value                 |
   +----------------+---------------+--------------------------------------+
   | maximum        | number        | upper limit of value                 |
   +----------------+---------------+--------------------------------------+
   |exclusiveMinimum| number or     | lower limit of value                 |
   |                | boolean (jso  |                                      |
   |                | draft 7/4)    |                                      |
   +----------------+---------------+--------------------------------------+
   |exclusiveMaximum| number or     | lower limit of value                 |
   |                | boolean (jso  |                                      |
   |                | draft 7/4)    |                                      |
   +----------------+---------------+--------------------------------------+
   | multipleOf     | number        | resolution of the number [NEEDED?]   |
   +----------------+---------------+--------------------------------------+
   | minLength      | integer       | shortest length string in octets     |
   +----------------+---------------+--------------------------------------+
   | maxLength      | integer       | longest length string in octets      |
   +----------------+---------------+--------------------------------------+
   | pattern        | string        | regular expression to constrain a    |
   |                |               | string pattern                       |
   +----------------+---------------+--------------------------------------+
   | format         | "date-time" / | JSON Schema formats as per           |
   |                |"date" / "time"|[I-D.handrews-json-schema-validation],|
   |                |/ "uri" / "uri-| Section 7.3                          |
   |                | reference" /  |                                      |
   |                | "uuid"        |                                      |
   +----------------+---------------+--------------------------------------+
   | minItems       | number        | Minimum number of items in array     |
   +----------------+---------------+--------------------------------------+
   | maxItems       | number        | Maximum number of items in array     |
   +----------------+---------------+--------------------------------------+
   | uniqueItems    | boolean       | if true, requires items to be all    |
   |                |               | different                            |
   +----------------+---------------+--------------------------------------+
   | items          | (subset of    | constraints on array items           |
   |                | common/data   |                                      |
   |                |qualities; see |                                      |
   |                | {{syntax})    |                                      |
   +----------------+---------------+--------------------------------------+

     Table 4: Qualities of odmProperty and odmData borrowed from json-
                                 schema.org




Koster & Bormann         Expires 3 December 2020               [Page 19]

Internet-Draft                  OneDM SDF                      June 2020


   +---------------+--------------+-------------------------+---------+
   | Quality       | Type         | Description             | Default |
   +===============+==============+=========================+=========+
   | (common)      |              | Section 4.6             |         |
   +---------------+--------------+-------------------------+---------+
   | units         | string       | SenML unit name as per  | N/A     |
   |               |              | [IANA.senml],           |         |
   |               |              | subregistry SenML Units |         |
   +---------------+--------------+-------------------------+---------+
   | scaleMinimum  | number       | lower limit of value in | N/A     |
   |               |              | units                   |         |
   +---------------+--------------+-------------------------+---------+
   | scaleMaximum  | number       | upper limit of value in | N/A     |
   |               |              | units                   |         |
   +---------------+--------------+-------------------------+---------+
   | readable      | boolean      | Reads are allowed       | true    |
   +---------------+--------------+-------------------------+---------+
   | writable      | boolean      | Writes are allowed      | true    |
   +---------------+--------------+-------------------------+---------+
   | observable    | boolean      | flag to indicate        | true    |
   |               |              | asynchronous            |         |
   |               |              | notification is         |         |
   |               |              | available               |         |
   +---------------+--------------+-------------------------+---------+
   | nullable      | boolean      | indicates a null value  | true    |
   |               |              | is available for this   |         |
   |               |              | type                    |         |
   +---------------+--------------+-------------------------+---------+
   | contentFormat | string       | content type (IANA      | N/A     |
   |               |              | media type string plus  |         |
   |               |              | parameters), encoding   |         |
   +---------------+--------------+-------------------------+---------+
   | subtype       | "bytestring" | subtype enumeration     | N/A     |
   |               | / "unixtime" |                         |         |
   +---------------+--------------+-------------------------+---------+

        Table 5: SDF-defined Qualities of odmProperty and odmData

5.  Keywords for type definitions

   The following SDF keywords are used to create type definitions in the
   target namespace.  All these definitions share some common qualities
   as discussed in Section 4.6.








Koster & Bormann         Expires 3 December 2020               [Page 20]

Internet-Draft                  OneDM SDF                      June 2020


5.1.  odmObject

   The odmObject keyword denotes zero or more Object definitions.  An
   odmObject may contain or include definitions of events, actions,
   properties, and data types.

   The qualities of an odmObject include the common qualities,
   additional qualities are shown in Table 6.  None of these qualities
   are required or have default values that are assumed if the quality
   is absent.

   +-------------+----------+------------------------------------------+
   | Quality     | Type     | Description                              |
   +=============+==========+==========================================+
   | (common)    |          | Section 4.6                              |
   +-------------+----------+------------------------------------------+
   | odmProperty | property | zero or more named property              |
   |             |          | definitions for this object              |
   +-------------+----------+------------------------------------------+
   | odmAction   | action   | zero or more named action                |
   |             |          | definitions for this object              |
   +-------------+----------+------------------------------------------+
   | odmEvent    | event    | zero or more named event                 |
   |             |          | definitions for this object              |
   +-------------+----------+------------------------------------------+
   | odmData     | data     | zero or more named data                  |
   |             |          | type definitions that might              |
   |             |          | be used in the above                     |
   +-------------+----------+------------------------------------------+

                      Table 6: Qualities of odmObject

5.2.  odmProperty

   The odmProperty keyword denotes zero or more property definitions.

   Properties are used to model elements of state.

   The qualities of odmProperty include the common qualities and the
   data qualities, see Section 4.7.

5.3.  odmAction

   The odmAction keyword denotes zero or more Action definitions.

   Actions are used to model commands and methods which are invoked.
   Actions have parameter data that are supplied upon invocation.




Koster & Bormann         Expires 3 December 2020               [Page 21]

Internet-Draft                  OneDM SDF                      June 2020


   The qualities of odmAction include the common qualities, additional
   qualities are shown in Table 7.

    +----------------------+-------+----------------------------+----+
    | Quality              | Type  | Description                |    |
    +======================+=======+============================+====+
    | (common)             |       | Section 4.6                |    |
    +----------------------+-------+----------------------------+----+
    | odmInputData         | array | Array of JSON Pointers to  | N/ |
    |                      |       | mandatory items in a valid | A  |
    |                      |       | action definition          |    |
    +----------------------+-------+----------------------------+----+
    | odmRequiredInputData | array | Array of JSON Pointers to  | N/ |
    |                      |       | mandatory items in a valid | A  |
    |                      |       | action definition          |    |
    +----------------------+-------+----------------------------+----+
    | odmOutputData        | array | Array of JSON Pointers to  | N/ |
    |                      |       | mandatory items in a valid | A  |
    |                      |       | action definition          |    |
    +----------------------+-------+----------------------------+----+
    | odmData              | data  | zero or more named data    |    |
    |                      |       | type definitions that      |    |
    |                      |       | might be used in the above |    |
    +----------------------+-------+----------------------------+----+

                     Table 7: Qualities of odmAction

   "odmInputData" refined by "odmRequiredInputData" define the input
   data of the action.  "odmOutputData" refined "odmRequired" (a quality
   defined in Table 3) define the output data of the action.

   CHECK THIS: odmProperty may not itself define any other ODM types;
   all types needed are referenced via SDF pointers.

5.4.  odmEvent

   The odmEvent keyword denotes zero or more Event definitions.

   Events are used to model asynchronous occurrences that may be
   communicated proactively.  Events have data elements which are
   communicated upon the occurrence of the event.

   The qualities of odmEvent include the common qualities, additional
   qualities are shown in Table 8.







Koster & Bormann         Expires 3 December 2020               [Page 22]

Internet-Draft                  OneDM SDF                      June 2020


   +---------------+-------+-----------------------+-------------------+
   | Quality       | Type  | Required              | Description       |
   +===============+=======+=======================+===================+
   | (common)      |       | Section 4.6           |                   |
   +---------------+-------+-----------------------+-------------------+
   | odmOutputData | array | no                    | Array of JSON     |
   |               |       |                       | Pointers to       |
   |               |       |                       | output items in a |
   |               |       |                       | valid definition  |
   +---------------+-------+-----------------------+-------------------+
   | odmData       | data  | zero or more          |                   |
   |               |       | named data type       |                   |
   |               |       | definitions that      |                   |
   |               |       | might be used in      |                   |
   |               |       | the above             |                   |
   +---------------+-------+-----------------------+-------------------+

                       Table 8: Qualities of odmEvent

   "odmOutputData" refined by "odmRequired" (a quality defined in
   Table 3) define the output data of the action.

5.5.  odmData

   The odmData keyword denotes zero or more Data type definitions.

   An odmData definition provides a semantic identifier for a data item
   and describes the constraints on the defined data item.

   odmData is used for Action parameters, for Event data, and for
   reusable constraints in property definitions

   The qualities of odmData include the common qualities and the data
   qualities, see Section 4.7.

6.  Example Simple Object Definition:















Koster & Bormann         Expires 3 December 2020               [Page 23]

Internet-Draft                  OneDM SDF                      June 2020


   {
     "info": {
       "title": "Example file for ODM Simple JSON Definition Format",
       "version": "20190424",
       "copyright": "Copyright 2019 Example Corp. All rights reserved.",
       "license": "https://example.com/license"
     },
     "namespace": {
       "cap": "https://example.com/capability/odm"
     },
     "defaultNamespace": "cap",
     "odmObject": {
       "Switch": {
         "odmProperty": {
           "value": {
             "type": "string",
             "enum": [
               "on",
               "off"
             ]
           }
         },
         "odmAction": {
           "on": {},
           "off": {}
         }
       }
     }
   }

7.  High Level Composition

   The requirements for high level composition include the following:

   *  The ability to represent products, standardized product types, and
      modular products while maintaining the atomicity of Objects.

   *  The ability to compose a reusable definition block from objects,
      for example a single plug unit of an outlet strip with on/off
      control, energy monitor, and optional dimmer objects, while
      retaining the atomicity of the individual objects.

   *  The ability to compose objects and other definition blocks into a
      higher level thing that represents a product, while retaining the
      atomicity of objects.






Koster & Bormann         Expires 3 December 2020               [Page 24]

Internet-Draft                  OneDM SDF                      June 2020


   *  The ability to enrich and refine a base definition to have
      product-specific qualities and quality values, e.g. unit, range,
      and scale settings.

   *  The ability to reference items in one part of a complex definition
      from another part of the same definition, for example to summarize
      the energy readings from all plugs in an outlet strip.

7.1.  Paths in the model namespaces

   The model namespace is organized according to terms that are defined
   in the definition files that are present in the namespace.  For
   example, definitions that originate from an organization or vendor
   are expected to be in a namespace that is specific to that
   organization or vendor.  There is expecred to be an ODM namespace for
   common ODM definitions.

   The structure of a path in a namespace is defined by the JSON
   Pointers to the definitions in the files in that namespace.  For
   example, if there is a file defining an object "Switch" with an
   action "on", then the reference to the action would be
   "ns:/odmObject/Switch/odmAction/on" where ns is the short name for
   the namespace prefix.

7.2.  Modular Composition

   Modular composition of definitions enables an existing definition
   (could be in the same file or another file) to become part of a new
   definition by including a reference to the existing definition within
   the model namespace.

7.2.1.  Use of the "odmRef" keyword to re-use a definition

   An existing definition may be used as a template for a new
   definition, that is, a new definition is created in the target
   namespace which uses the defined qualities of some existing
   definition.  This pattern will use the keyword "odmRef" as a quality
   of a new definition with a value consisting of a reference to the
   existing definition that is to be used as a template.  Optionally,
   new qualities may be added and values of optional qualities and
   quality values may be defined.

   ISSUE: Can qualities from the source definition be overridden?  The
   above only says "added".  Yes, we do want to enable overriding, but
   need to warn specifiers not to use this in a way that contradicts the
   referenced semantics.





Koster & Bormann         Expires 3 December 2020               [Page 25]

Internet-Draft                  OneDM SDF                      June 2020


   "odmData":
     "length" : {
       "type": "number",
       "minimum": 0,
       "units": "m"
       "description": "There can be no negative lengths"
     }
   ...
     "cable-length" : {
       "odmRef": "#/odmData/length"
       "minimum": 0.05,
       "description": "cables must be at least 5 cm"
     }

7.3.  odmThing

   An odmThing is a set of declarations and qualities that may be part
   of a more complex model.  For example, the object declarations that
   make up the definition of a single socket of an outlet strip could be
   encapsulated in an odmThing, and the socket-thing itself could be
   used in a declaration in the odmThing definition for the outlet
   strip.

   odmThing definitions carry semantic meaning, such as a defined
   refrigerator compartment and a defined freezer compartment, making up
   a combination refrigerator-freezer product.

   An odmThing may be composed of odmObjects and other odmThings.

   The qualities of odmThing are shown in Table 9.

               +-----------+------+----------+-------------+
               | Quality   | Type | Required | Description |
               +===========+======+==========+=============+
               | (common)  |      |          | Section 4.6 |
               +-----------+------+----------+-------------+
               | odmThing  |      |          |             |
               +-----------+------+----------+-------------+
               | odmObject |      |          |             |
               +-----------+------+----------+-------------+

               Table 9: Qualities of odmThing and odmProduct









Koster & Bormann         Expires 3 December 2020               [Page 26]

Internet-Draft                  OneDM SDF                      June 2020


7.4.  odmProduct

   An odmProduct provides the level of abstraction for representing a
   unique product or a profile for a standardized type of product, for
   example a "device type" definition with required minimum
   functionality.

   Products may be composed of Objects and Things at the high level, and
   may include their own definitions of Properties, Actions, and Events
   that can be used to extend or complete the included Object
   definitions.

   Product definitions may set optional defaults and constant values for
   specific use cases, for example units, range, and scale settings for
   properties, or available parameters for Actions.

   The qualities of odmProduct are the same as for odmThing and are
   shown in Table 9.

8.  References

8.1.  Normative References

   [I-D.handrews-json-schema-validation]
              Wright, A., Andrews, H., and B. Hutton, "JSON Schema
              Validation: A Vocabulary for Structural Validation of
              JSON", Work in Progress, Internet-Draft, draft-handrews-
              json-schema-validation-02, 17 September 2019,
              <http://www.ietf.org/internet-drafts/draft-handrews-json-
              schema-validation-02.txt>.

   [IANA.senml]
              IANA, "Sensor Measurement Lists (SenML)",
              <http://www.iana.org/assignments/senml>.

   [RFC0020]  Cerf, V.G., "ASCII format for network interchange",
              STD 80, RFC 20, DOI 10.17487/RFC0020, October 1969,
              <https://www.rfc-editor.org/info/rfc20>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.



Koster & Bormann         Expires 3 December 2020               [Page 27]

Internet-Draft                  OneDM SDF                      June 2020


   [RFC6901]  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              "JavaScript Object Notation (JSON) Pointer", RFC 6901,
              DOI 10.17487/RFC6901, April 2013,
              <https://www.rfc-editor.org/info/rfc6901>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/info/rfc8610>.

   [W3C.NOTE-curie-20101216]
              Birbeck, M. and S. McCarron, "CURIE Syntax 1.0", World
              Wide Web Consortium NOTE NOTE-curie-20101216, 16 December
              2010, <http://www.w3.org/TR/2010/NOTE-curie-20101216>.

8.2.  Informative References

   [ZCL]      "The ZigBee Cluster Library",
              DOI 10.1016/b978-0-7506-8597-9.00006-9, Zigbee Wireless
              Networking pp. 239-271, 2008,
              <https://doi.org/10.1016/b978-0-7506-8597-9.00006-9>.

Appendix A.  Formal Syntax of SDF

   This appendix describes the syntax of SDF using CDDL [RFC8610].  Note
   that this appendix was derived from Ari Keranen's "alt-schema" and
   Michael Koster's "schema", with a view of covering the syntax that is
   currently in use at the One Data Model "playground" repository.

   TODO: Align with full framework syntax, as required.

   start = sdf-syntax

   sdf-syntax = {
    info: sdfinfo                  ; don't require this in flexible syntax, though
    ? namespace: named<text>
    ? defaultnamespace: text
    ? odmThing: named<thingqualities>       ; Thing is a composition of objects that work together in some way
    ? odmProduct: named<productqualities>   ; Product is a composition of things and objects that can model a SKU-level instance of a product
    ? odmObject: named<objectqualities>     ; Object is a set of Properties, Actions, and Events that together perform a particular function
    ? odmProperty: named<propertyqualities> ; Property represents the state of an instance of an object
    ? odmAction: named<actionqualities>     ; Action is a directive to invoke an application layer verb associated with an object
    ? odmEvent: named<eventqualities>       ; Event represents an occurence of something associated with an object



Koster & Bormann         Expires 3 December 2020               [Page 28]

Internet-Draft                  OneDM SDF                      June 2020


    ? odmData: named<dataqualities>         ; Data represents a piece of information that can be the state of a property or a parameter to an action or a signal in an event
   }

   sdfinfo = {
    title: text
    version: text
    copyright: text
    license: text
   }

   ; Shortcut for a map that gives names to instances of X
   named<X> = { * text => X }

   sdf-pointer = text ; .regexp curie-regexp -- TO DO!
   pointer-list = [* sdf-pointer]  ; ISSUE: no point in having an empty list, no? but used for odmRequired in odmobject-multiple_axis_joystick.sdf.json

   commonqualities = (
    ? description: text            ; long text (no constraints)
    ? label: text                  ; short text (no constraints); default to key
    ? $comment: text               ; source code comments only, no semantics
    ? odmRef: sdf-pointer
    ? odmRequired: pointer-list    ; applies to qualities of properties, of data
   )

   ; for building hierarchy
   thingqualities = {
    commonqualities,
    ? odmObject: named<objectqualities>
    ? odmThing: named<thingqualities>
   }

   productqualities = thingqualities ; ISSUE: get rid of odmProduct?

   ; for single objects
   objectqualities = {
    commonqualities,
    ? odmProperty: named<propertyqualities>
    ? odmAction: named<actionqualities>
    ? odmEvent: named<eventqualities>
    ? odmData: named<dataqualities>
   }

   propertyqualities = dataqualities ; the definitions in odmData are declarations in odmProperty

   actionqualities = {
    commonqualities,
    ? odmInputData: pointer-list   ; odmRequiredInputData applies here (a bit redundant)
    ? odmRequiredInputData: pointer-list



Koster & Bormann         Expires 3 December 2020               [Page 29]

Internet-Draft                  OneDM SDF                      June 2020


    ? odmOutputData: pointer-list  ; odmRequired applies here
    ? odmData: named<dataqualities>         ; zero or more named data type definitions that might be used in the above
   }

   eventqualities = {
    commonqualities
    ? odmOutputData: pointer-list  ; odmRequired applies here
    ? odmData: named<dataqualities>         ; zero or more named data type definitions that might be used in the above
   }

   dataqualities = {               ; also propertyqualities
    commonqualities,
    jsonschema,
    ? units: text
    ? scaleMinimum: number
    ? scaleMaximum: number
    ? observable: bool
    ? readable: bool
    ? writable: bool
    ? nullable: bool
    ? subtype: "bytestring" / "unixtime"
    ? contentFormat: text
   }

   allowed-types = number / text / bool / null
                 / [* number] / [* text] / [* bool]

   jsonschema = (
    ? type: "number" / "string" / "boolean" / "integer" / "array" ; / "object"
    ? enum: [+ allowed-types]                                              ; should validate against type
    ? const: allowed-types
    ? default: allowed-types
    ; number/integer constraints
    ? minimum: number
    ? maximum: number
    ? exclusiveMinimum: bool / number      ; jso draft 4/7
    ? exclusiveMaximum: bool / number      ; jso draft 4/7
    ? multipleOf: number                   ; ISSUE: Do we need this?
    ; text string constraints
    ? minLength: number
    ? maxLength: number
    ? pattern: text                ; regexp
    ? format: "date-time" / "date" / "time"
              / "uri" / "uri-reference" / "uuid"
              ; expand on demand
    ; array constraints
    ? minItems: number
    ? maxItems: number



Koster & Bormann         Expires 3 December 2020               [Page 30]

Internet-Draft                  OneDM SDF                      June 2020


    ? uniqueItems: bool
    ? items: { ;;; ultimately, this will be mostly recursive, but, for now
               ;;; let's find out what we actually need
        ? odmRef: sdf-pointer          ; import limited to the subset that we allow here...
        ? description: text            ; long text (no constraints)
        ? $comment: text               ; source code comments only, no semantics
        ; commonqualities, ; -- ISSUE: should leave this out for non-complex data types, but need the above three
        ? type: "number" / "string" / "boolean" / "integer" ; no "array" / "object"
        ; jso subset
        ? minimum: number
        ? maximum: number
        ? enum: [+ any]
        ? format: text
        ? minLength: number
        ? maxLength: number
      }
   )

Appendix B.  json-schema.org Rendition of SDF Syntax

   This appendix describes the syntax of SDF defined in Appendix A, but
   using a version of the description techniques advertised on json-
   schema.org [I-D.handrews-json-schema-validation].

   {
     "title": "sdf.cddl",
     "$schema": "http://json-schema.org/draft-07/schema#",
     "$ref": "#/definitions/sdf-syntax",
     "definitions": {
       "sdf-syntax": {
         "type": "object",
         "required": [
           "info"
         ],
         "properties": {
           "info": {
             "$ref": "#/definitions/sdfinfo"
           },
           "namespace": {
             "type": "object",
             "additionalProperties": {
               "type": "string"
             }
           },
           "defaultnamespace": {
             "type": "string"
           },
           "odmThing": {



Koster & Bormann         Expires 3 December 2020               [Page 31]

Internet-Draft                  OneDM SDF                      June 2020


             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/thingqualities"
             }
           },
           "odmProduct": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/productqualities"
             }
           },
           "odmObject": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/objectqualities"
             }
           },
           "odmProperty": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/propertyqualities"
             }
           },
           "odmAction": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/actionqualities"
             }
           },
           "odmEvent": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/eventqualities"
             }
           },
           "odmData": {
             "type": "object",
             "additionalProperties": {
               "$ref": "#/definitions/dataqualities"
             }
           }
         }
       },
       "sdfinfo": {
         "type": "object",
         "required": [
           "title",
           "version",



Koster & Bormann         Expires 3 December 2020               [Page 32]

Internet-Draft                  OneDM SDF                      June 2020


           "copyright",
           "license"
         ],
         "properties": {
           "title": {
             "type": "string"
           },
           "version": {
             "type": "string"
           },
           "copyright": {
             "type": "string"
           },
           "license": {
             "type": "string"
           }
         }
       },
       "thingqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmObject": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/objectqualities"
                 }
               },
               "odmThing": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/thingqualities"
                 }
               }
             }
           }
         ]
       },
       "commonqualities": {
         "type": "object",
         "properties": {
           "description": {
             "type": "string"
           },



Koster & Bormann         Expires 3 December 2020               [Page 33]

Internet-Draft                  OneDM SDF                      June 2020


           "label": {
             "type": "string"
           },
           "$comment": {
             "type": "string"
           },
           "odmRef": {
             "$ref": "#/definitions/sdf-pointer"
           },
           "odmRequired": {
             "$ref": "#/definitions/pointer-list"
           }
         }
       },
       "sdf-pointer": {
         "type": "string"
       },
       "pointer-list": {
         "type": "array",
         "items": {
           "$ref": "#/definitions/sdf-pointer"
         }
       },
       "objectqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmProperty": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/propertyqualities"
                 }
               },
               "odmAction": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/actionqualities"
                 }
               },
               "odmEvent": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/eventqualities"
                 }



Koster & Bormann         Expires 3 December 2020               [Page 34]

Internet-Draft                  OneDM SDF                      June 2020


               },
               "odmData": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/dataqualities"
                 }
               }
             }
           }
         ]
       },
       "propertyqualities": {
         "$ref": "#/definitions/dataqualities"
       },
       "dataqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "$ref": "#/definitions/jsonschema"
           },
           {
             "type": "object",
             "properties": {
               "units": {
                 "type": "string"
               },
               "scaleMinimum": {
                 "type": "number"
               },
               "scaleMaximum": {
                 "type": "number"
               },
               "observable": {
                 "type": "boolean"
               },
               "readable": {
                 "type": "boolean"
               },
               "writable": {
                 "type": "boolean"
               },
               "nullable": {
                 "type": "boolean"
               },
               "subtype": {
                 "type": "string",



Koster & Bormann         Expires 3 December 2020               [Page 35]

Internet-Draft                  OneDM SDF                      June 2020


                 "enum": [
                   "bytestring",
                   "unixtime"
                 ]
               },
               "contentFormat": {
                 "type": "string"
               }
             }
           }
         ]
       },
       "jsonschema": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string",
             "enum": [
               "number",
               "string",
               "boolean",
               "integer",
               "array"
             ]
           },
           "enum": {
             "type": "array",
             "items": {
               "$ref": "#/definitions/allowed-types"
             },
             "minItems": 1
           },
           "const": {
             "$ref": "#/definitions/allowed-types"
           },
           "default": {
             "$ref": "#/definitions/allowed-types"
           },
           "minimum": {
             "type": "number"
           },
           "maximum": {
             "type": "number"
           },
           "exclusiveMinimum": {
             "anyOf": [
               {
                 "type": "boolean"



Koster & Bormann         Expires 3 December 2020               [Page 36]

Internet-Draft                  OneDM SDF                      June 2020


               },
               {
                 "type": "number"
               }
             ]
           },
           "exclusiveMaximum": {
             "anyOf": [
               {
                 "type": "boolean"
               },
               {
                 "type": "number"
               }
             ]
           },
           "multipleOf": {
             "type": "number"
           },
           "minLength": {
             "type": "number"
           },
           "maxLength": {
             "type": "number"
           },
           "pattern": {
             "type": "string"
           },
           "format": {
             "type": "string",
             "enum": [
               "date-time",
               "date",
               "time",
               "uri",
               "uri-reference",
               "uuid"
             ]
           },
           "minItems": {
             "type": "number"
           },
           "maxItems": {
             "type": "number"
           },
           "uniqueItems": {
             "type": "boolean"
           },



Koster & Bormann         Expires 3 December 2020               [Page 37]

Internet-Draft                  OneDM SDF                      June 2020


           "items": {
             "type": "object",
             "properties": {
               "odmRef": {
                 "$ref": "#/definitions/sdf-pointer"
               },
               "description": {
                 "type": "string"
               },
               "$comment": {
                 "type": "string"
               },
               "type": {
                 "type": "string",
                 "enum": [
                   "number",
                   "string",
                   "boolean",
                   "integer"
                 ]
               },
               "minimum": {
                 "type": "number"
               },
               "maximum": {
                 "type": "number"
               },
               "enum": {
                 "type": "array",
                 "minItems": 1
               },
               "format": {
                 "type": "string"
               },
               "minLength": {
                 "type": "number"
               },
               "maxLength": {
                 "type": "number"
               }
             }
           }
         }
       },
       "allowed-types": {
         "anyOf": [
           {
             "type": "number"



Koster & Bormann         Expires 3 December 2020               [Page 38]

Internet-Draft                  OneDM SDF                      June 2020


           },
           {
             "type": "string"
           },
           {
             "type": "boolean"
           },
           {
             "type": "null"
           },
           {
             "type": "array",
             "items": {
               "type": "number"
             }
           },
           {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           {
             "type": "array",
             "items": {
               "type": "boolean"
             }
           }
         ]
       },
       "actionqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmInputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmRequiredInputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmOutputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmData": {



Koster & Bormann         Expires 3 December 2020               [Page 39]

Internet-Draft                  OneDM SDF                      June 2020


                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/dataqualities"
                 }
               }
             }
           }
         ]
       },
       "eventqualities": {
         "allOf": [
           {
             "$ref": "#/definitions/commonqualities"
           },
           {
             "type": "object",
             "properties": {
               "odmOutputData": {
                 "$ref": "#/definitions/pointer-list"
               },
               "odmData": {
                 "type": "object",
                 "additionalProperties": {
                   "$ref": "#/definitions/dataqualities"
                 }
               }
             }
           }
         ]
       },
       "productqualities": {
         "$ref": "#/definitions/thingqualities"
       }
     }
   }

Acknowledgements

   This strawman draft is based on "sdf.md" and "sdf-schema.json" in the
   one-data-model "language" repository, as well as Ari Keranen's "alt-
   schema" from the Ericsson Research "ipso-odm" repository.

Contributors








Koster & Bormann         Expires 3 December 2020               [Page 40]

Internet-Draft                  OneDM SDF                      June 2020


   Ari Ker√§nen
   Ericsson
   FI-02420 Jorvas
   Finland

   Email: ari.keranen@ericsson.com


   Wouter van der Beek


Authors' Addresses

   Michael Koster (editor)
   SmartThings
   665 Clyde Avenue
   Mountain View,  94043
   United States of America

   Phone: +1-707-502-5136
   Email: Michael.Koster@smartthings.com


   Carsten Bormann (editor)
   Universit√§t Bremen TZI
   Postfach 330440
   D-28359 Bremen
   Germany

   Phone: +49-421-218-63921
   Email: cabo@tzi.org




















Koster & Bormann         Expires 3 December 2020               [Page 41]
